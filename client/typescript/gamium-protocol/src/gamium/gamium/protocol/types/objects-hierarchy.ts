// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
  ObjectHierarchyNode,
  ObjectHierarchyNodeT,
} from "../../../gamium/protocol/types/object-hierarchy-node.js";

export class ObjectsHierarchy
  implements flatbuffers.IUnpackableObject<ObjectsHierarchyT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ObjectsHierarchy {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsObjectsHierarchy(
    bb: flatbuffers.ByteBuffer,
    obj?: ObjectsHierarchy
  ): ObjectsHierarchy {
    return (obj || new ObjectsHierarchy()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsObjectsHierarchy(
    bb: flatbuffers.ByteBuffer,
    obj?: ObjectsHierarchy
  ): ObjectsHierarchy {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ObjectsHierarchy()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  name(): string | null;
  name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  name(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  children(
    index: number,
    obj?: ObjectHierarchyNode
  ): ObjectHierarchyNode | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? (obj || new ObjectHierarchyNode()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb!
        )
      : null;
  }

  childrenLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startObjectsHierarchy(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, nameOffset, 0);
  }

  static addChildren(
    builder: flatbuffers.Builder,
    childrenOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, childrenOffset, 0);
  }

  static createChildrenVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endObjectsHierarchy(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // name
    return offset;
  }

  static createObjectsHierarchy(
    builder: flatbuffers.Builder,
    nameOffset: flatbuffers.Offset,
    childrenOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    ObjectsHierarchy.startObjectsHierarchy(builder);
    ObjectsHierarchy.addName(builder, nameOffset);
    ObjectsHierarchy.addChildren(builder, childrenOffset);
    return ObjectsHierarchy.endObjectsHierarchy(builder);
  }

  unpack(): ObjectsHierarchyT {
    return new ObjectsHierarchyT(
      this.name(),
      this.bb!.createObjList<ObjectHierarchyNode, ObjectHierarchyNodeT>(
        this.children.bind(this),
        this.childrenLength()
      )
    );
  }

  unpackTo(_o: ObjectsHierarchyT): void {
    _o.name = this.name();
    _o.children = this.bb!.createObjList<
      ObjectHierarchyNode,
      ObjectHierarchyNodeT
    >(this.children.bind(this), this.childrenLength());
  }
}

export class ObjectsHierarchyT implements flatbuffers.IGeneratedObject {
  constructor(
    public name: string | Uint8Array | null = null,
    public children: ObjectHierarchyNodeT[] = []
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const name = this.name !== null ? builder.createString(this.name!) : 0;
    const children = ObjectsHierarchy.createChildrenVector(
      builder,
      builder.createObjectOffsetList(this.children)
    );

    return ObjectsHierarchy.createObjectsHierarchy(builder, name, children);
  }
}
