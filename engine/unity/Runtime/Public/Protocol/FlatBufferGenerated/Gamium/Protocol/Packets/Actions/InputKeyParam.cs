// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets.Actions
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InputKeyParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static InputKeyParam GetRootAsInputKeyParam(ByteBuffer _bb) { return GetRootAsInputKeyParam(_bb, new InputKeyParam()); }
  public static InputKeyParam GetRootAsInputKeyParam(ByteBuffer _bb, InputKeyParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InputKeyParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Gamium.Protocol.Types.InputKeyPressType Press { get { int o = __p.__offset(4); return o != 0 ? (Gamium.Protocol.Types.InputKeyPressType)__p.bb.GetShort(o + __p.bb_pos) : Gamium.Protocol.Types.InputKeyPressType.DOWN; } }
  public string Codes(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CodesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Gamium.Protocol.Packets.Actions.InputKeyParam> CreateInputKeyParam(FlatBufferBuilder builder,
      Gamium.Protocol.Types.InputKeyPressType press = Gamium.Protocol.Types.InputKeyPressType.DOWN,
      VectorOffset codesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    InputKeyParam.AddCodes(builder, codesOffset);
    InputKeyParam.AddPress(builder, press);
    return InputKeyParam.EndInputKeyParam(builder);
  }

  public static void StartInputKeyParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPress(FlatBufferBuilder builder, Gamium.Protocol.Types.InputKeyPressType press) { builder.AddShort(0, (short)press, 0); }
  public static void AddCodes(FlatBufferBuilder builder, VectorOffset codesOffset) { builder.AddOffset(1, codesOffset.Value, 0); }
  public static VectorOffset CreateCodesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCodesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Gamium.Protocol.Packets.Actions.InputKeyParam> EndInputKeyParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.Actions.InputKeyParam>(o);
  }
  public InputKeyParamT UnPack() {
    var _o = new InputKeyParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InputKeyParamT _o) {
    _o.Press = this.Press;
    _o.Codes = new List<string>();
    for (var _j = 0; _j < this.CodesLength; ++_j) {_o.Codes.Add(this.Codes(_j));}
  }
  public static Offset<Gamium.Protocol.Packets.Actions.InputKeyParam> Pack(FlatBufferBuilder builder, InputKeyParamT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.Actions.InputKeyParam>);
    var _codes = default(VectorOffset);
    if (_o.Codes != null) {
      var __codes = new StringOffset[_o.Codes.Count];
      for (var _j = 0; _j < __codes.Length; ++_j) { __codes[_j] = builder.CreateString(_o.Codes[_j]); }
      _codes = CreateCodesVector(builder, __codes);
    }
    return CreateInputKeyParam(
      builder,
      _o.Press,
      _codes);
  }
}

public class InputKeyParamT
{
  public Gamium.Protocol.Types.InputKeyPressType Press { get; set; }
  public List<string> Codes { get; set; }

  public InputKeyParamT() {
    this.Press = Gamium.Protocol.Types.InputKeyPressType.DOWN;
    this.Codes = null;
  }
}


}
