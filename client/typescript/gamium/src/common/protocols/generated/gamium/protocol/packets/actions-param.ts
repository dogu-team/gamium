// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ActionsParam implements flatbuffers.IUnpackableObject<ActionsParamT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ActionsParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsActionsParam(bb: flatbuffers.ByteBuffer, obj?: ActionsParam): ActionsParam {
    return (obj || new ActionsParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsActionsParam(bb: flatbuffers.ByteBuffer, obj?: ActionsParam): ActionsParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ActionsParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  actions(index: number): string;
  actions(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
  actions(index: number, optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
  }

  actionsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startActionsParam(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addActions(builder: flatbuffers.Builder, actionsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, actionsOffset, 0);
  }

  static createActionsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startActionsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endActionsParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createActionsParam(builder: flatbuffers.Builder, actionsOffset: flatbuffers.Offset): flatbuffers.Offset {
    ActionsParam.startActionsParam(builder);
    ActionsParam.addActions(builder, actionsOffset);
    return ActionsParam.endActionsParam(builder);
  }

  unpack(): ActionsParamT {
    return new ActionsParamT(this.bb!.createScalarList<string>(this.actions.bind(this), this.actionsLength()));
  }

  unpackTo(_o: ActionsParamT): void {
    _o.actions = this.bb!.createScalarList<string>(this.actions.bind(this), this.actionsLength());
  }
}

export class ActionsParamT implements flatbuffers.IGeneratedObject {
  constructor(public actions: string[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const actions = ActionsParam.createActionsVector(builder, builder.createObjectOffsetList(this.actions));

    return ActionsParam.createActionsParam(builder, actions);
  }
}
