// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FindObjectsResult : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static FindObjectsResult GetRootAsFindObjectsResult(ByteBuffer _bb) { return GetRootAsFindObjectsResult(_bb, new FindObjectsResult()); }
  public static FindObjectsResult GetRootAsFindObjectsResult(ByteBuffer _bb, FindObjectsResult obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FindObjectsResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Gamium.Protocol.Types.ObjectInfo? Infos(int j) { int o = __p.__offset(4); return o != 0 ? (Gamium.Protocol.Types.ObjectInfo?)(new Gamium.Protocol.Types.ObjectInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InfosLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Gamium.Protocol.Packets.FindObjectsResult> CreateFindObjectsResult(FlatBufferBuilder builder,
      VectorOffset infosOffset = default(VectorOffset)) {
    builder.StartTable(1);
    FindObjectsResult.AddInfos(builder, infosOffset);
    return FindObjectsResult.EndFindObjectsResult(builder);
  }

  public static void StartFindObjectsResult(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddInfos(FlatBufferBuilder builder, VectorOffset infosOffset) { builder.AddOffset(0, infosOffset.Value, 0); }
  public static VectorOffset CreateInfosVector(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.ObjectInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInfosVectorBlock(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.ObjectInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfosVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Gamium.Protocol.Types.ObjectInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Gamium.Protocol.Types.ObjectInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInfosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Gamium.Protocol.Packets.FindObjectsResult> EndFindObjectsResult(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.FindObjectsResult>(o);
  }
  public FindObjectsResultT UnPack() {
    var _o = new FindObjectsResultT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FindObjectsResultT _o) {
    _o.Infos = new List<Gamium.Protocol.Types.ObjectInfoT>();
    for (var _j = 0; _j < this.InfosLength; ++_j) {_o.Infos.Add(this.Infos(_j).HasValue ? this.Infos(_j).Value.UnPack() : null);}
  }
  public static Offset<Gamium.Protocol.Packets.FindObjectsResult> Pack(FlatBufferBuilder builder, FindObjectsResultT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.FindObjectsResult>);
    var _infos = default(VectorOffset);
    if (_o.Infos != null) {
      var __infos = new Offset<Gamium.Protocol.Types.ObjectInfo>[_o.Infos.Count];
      for (var _j = 0; _j < __infos.Length; ++_j) { __infos[_j] = Gamium.Protocol.Types.ObjectInfo.Pack(builder, _o.Infos[_j]); }
      _infos = CreateInfosVector(builder, __infos);
    }
    return CreateFindObjectsResult(
      builder,
      _infos);
  }
}

public class FindObjectsResultT
{
  public List<Gamium.Protocol.Types.ObjectInfoT> Infos { get; set; }

  public FindObjectsResultT() {
    this.Infos = null;
  }
}


}
