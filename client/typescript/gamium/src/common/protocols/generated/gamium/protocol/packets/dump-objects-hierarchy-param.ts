// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class DumpObjectsHierarchyParam implements flatbuffers.IUnpackableObject<DumpObjectsHierarchyParamT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): DumpObjectsHierarchyParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDumpObjectsHierarchyParam(bb: flatbuffers.ByteBuffer, obj?: DumpObjectsHierarchyParam): DumpObjectsHierarchyParam {
    return (obj || new DumpObjectsHierarchyParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsDumpObjectsHierarchyParam(bb: flatbuffers.ByteBuffer, obj?: DumpObjectsHierarchyParam): DumpObjectsHierarchyParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new DumpObjectsHierarchyParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  objectId(): string | null;
  objectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  objectId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  depth(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  static startDumpObjectsHierarchyParam(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addObjectId(builder: flatbuffers.Builder, objectIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, objectIdOffset, 0);
  }

  static addDepth(builder: flatbuffers.Builder, depth: number) {
    builder.addFieldInt32(1, depth, 0);
  }

  static endDumpObjectsHierarchyParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createDumpObjectsHierarchyParam(builder: flatbuffers.Builder, objectIdOffset: flatbuffers.Offset, depth: number): flatbuffers.Offset {
    DumpObjectsHierarchyParam.startDumpObjectsHierarchyParam(builder);
    DumpObjectsHierarchyParam.addObjectId(builder, objectIdOffset);
    DumpObjectsHierarchyParam.addDepth(builder, depth);
    return DumpObjectsHierarchyParam.endDumpObjectsHierarchyParam(builder);
  }

  unpack(): DumpObjectsHierarchyParamT {
    return new DumpObjectsHierarchyParamT(this.objectId(), this.depth());
  }

  unpackTo(_o: DumpObjectsHierarchyParamT): void {
    _o.objectId = this.objectId();
    _o.depth = this.depth();
  }
}

export class DumpObjectsHierarchyParamT implements flatbuffers.IGeneratedObject {
  constructor(public objectId: string | Uint8Array | null = null, public depth: number = 0) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const objectId = this.objectId !== null ? builder.createString(this.objectId!) : 0;

    return DumpObjectsHierarchyParam.createDumpObjectsHierarchyParam(builder, objectId, this.depth);
  }
}
