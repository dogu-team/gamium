# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Packets

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Env(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Env()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEnv(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Env
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Env
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Env
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EnvStart(builder): builder.StartObject(2)
def Start(builder):
    return EnvStart(builder)
def EnvAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return EnvAddKey(builder, key)
def EnvAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return EnvAddValue(builder, value)
def EnvEnd(builder): return builder.EndObject()
def End(builder):
    return EnvEnd(builder)

class EnvT(object):

    # EnvT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        env = Env()
        env.Init(buf, pos)
        return cls.InitFromObj(env)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, env):
        x = EnvT()
        x._UnPack(env)
        return x

    # EnvT
    def _UnPack(self, env):
        if env is None:
            return
        self.key = env.Key()
        self.value = env.Value()

    # EnvT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = builder.CreateString(self.value)
        EnvStart(builder)
        if self.key is not None:
            EnvAddKey(builder, key)
        if self.value is not None:
            EnvAddValue(builder, value)
        env = EnvEnd(builder)
        return env
