// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
  ObjectsHierarchy,
  ObjectsHierarchyT,
} from "../../../gamium/protocol/types/objects-hierarchy.js";

export class DumpObjectsHierarchyResult
  implements flatbuffers.IUnpackableObject<DumpObjectsHierarchyResultT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): DumpObjectsHierarchyResult {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDumpObjectsHierarchyResult(
    bb: flatbuffers.ByteBuffer,
    obj?: DumpObjectsHierarchyResult
  ): DumpObjectsHierarchyResult {
    return (obj || new DumpObjectsHierarchyResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsDumpObjectsHierarchyResult(
    bb: flatbuffers.ByteBuffer,
    obj?: DumpObjectsHierarchyResult
  ): DumpObjectsHierarchyResult {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new DumpObjectsHierarchyResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  hierarchies(index: number, obj?: ObjectsHierarchy): ObjectsHierarchy | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new ObjectsHierarchy()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb!
        )
      : null;
  }

  hierarchiesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startDumpObjectsHierarchyResult(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addHierarchies(
    builder: flatbuffers.Builder,
    hierarchiesOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, hierarchiesOffset, 0);
  }

  static createHierarchiesVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startHierarchiesVector(
    builder: flatbuffers.Builder,
    numElems: number
  ) {
    builder.startVector(4, numElems, 4);
  }

  static endDumpObjectsHierarchyResult(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createDumpObjectsHierarchyResult(
    builder: flatbuffers.Builder,
    hierarchiesOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    DumpObjectsHierarchyResult.startDumpObjectsHierarchyResult(builder);
    DumpObjectsHierarchyResult.addHierarchies(builder, hierarchiesOffset);
    return DumpObjectsHierarchyResult.endDumpObjectsHierarchyResult(builder);
  }

  unpack(): DumpObjectsHierarchyResultT {
    return new DumpObjectsHierarchyResultT(
      this.bb!.createObjList<ObjectsHierarchy, ObjectsHierarchyT>(
        this.hierarchies.bind(this),
        this.hierarchiesLength()
      )
    );
  }

  unpackTo(_o: DumpObjectsHierarchyResultT): void {
    _o.hierarchies = this.bb!.createObjList<
      ObjectsHierarchy,
      ObjectsHierarchyT
    >(this.hierarchies.bind(this), this.hierarchiesLength());
  }
}

export class DumpObjectsHierarchyResultT
  implements flatbuffers.IGeneratedObject
{
  constructor(public hierarchies: ObjectsHierarchyT[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const hierarchies = DumpObjectsHierarchyResult.createHierarchiesVector(
      builder,
      builder.createObjectOffsetList(this.hierarchies)
    );

    return DumpObjectsHierarchyResult.createDumpObjectsHierarchyResult(
      builder,
      hierarchies
    );
  }
}
