// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ActionParam, unionListToActionParam } from '../../../gamium/protocol/packets/action-param.js';
import { AppQuitParamT } from '../../../gamium/protocol/packets/actions/app-quit-param.js';
import { InputKeyParamT } from '../../../gamium/protocol/packets/actions/input-key-param.js';
import { InputMouseParamT } from '../../../gamium/protocol/packets/actions/input-mouse-param.js';
import { InputSetTextParamT } from '../../../gamium/protocol/packets/actions/input-set-text-param.js';
import { MovePlayerParamT } from '../../../gamium/protocol/packets/actions/move-player-param.js';
import { SleepParamT } from '../../../gamium/protocol/packets/actions/sleep-param.js';

export class ActionsParam implements flatbuffers.IUnpackableObject<ActionsParamT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ActionsParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsActionsParam(bb: flatbuffers.ByteBuffer, obj?: ActionsParam): ActionsParam {
    return (obj || new ActionsParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsActionsParam(bb: flatbuffers.ByteBuffer, obj?: ActionsParam): ActionsParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ActionsParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  actionsType(index: number): ActionParam | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
  }

  actionsTypeLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  actionsTypeArray(): Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? new Uint8Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  actions(index: number, obj: any): any | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
  }

  actionsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startActionsParam(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addActionsType(builder: flatbuffers.Builder, actionsTypeOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, actionsTypeOffset, 0);
  }

  static createActionsTypeVector(builder: flatbuffers.Builder, data: ActionParam[]): flatbuffers.Offset {
    builder.startVector(1, data.length, 1);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]!);
    }
    return builder.endVector();
  }

  static startActionsTypeVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(1, numElems, 1);
  }

  static addActions(builder: flatbuffers.Builder, actionsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, actionsOffset, 0);
  }

  static createActionsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startActionsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endActionsParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createActionsParam(builder: flatbuffers.Builder, actionsTypeOffset: flatbuffers.Offset, actionsOffset: flatbuffers.Offset): flatbuffers.Offset {
    ActionsParam.startActionsParam(builder);
    ActionsParam.addActionsType(builder, actionsTypeOffset);
    ActionsParam.addActions(builder, actionsOffset);
    return ActionsParam.endActionsParam(builder);
  }

  unpack(): ActionsParamT {
    return new ActionsParamT(
      this.bb!.createScalarList<ActionParam>(this.actionsType.bind(this), this.actionsTypeLength()),
      (() => {
        const ret = [];
        for (let targetEnumIndex = 0; targetEnumIndex < this.actionsTypeLength(); ++targetEnumIndex) {
          const targetEnum = this.actionsType(targetEnumIndex);
          if (targetEnum === null || ActionParam[targetEnum!] === 'NONE') {
            continue;
          }

          const temp = unionListToActionParam(targetEnum, this.actions.bind(this), targetEnumIndex);
          if (temp === null) {
            continue;
          }
          ret.push(temp.unpack());
        }
        return ret;
      })(),
    );
  }

  unpackTo(_o: ActionsParamT): void {
    _o.actionsType = this.bb!.createScalarList<ActionParam>(this.actionsType.bind(this), this.actionsTypeLength());
    _o.actions = (() => {
      const ret = [];
      for (let targetEnumIndex = 0; targetEnumIndex < this.actionsTypeLength(); ++targetEnumIndex) {
        const targetEnum = this.actionsType(targetEnumIndex);
        if (targetEnum === null || ActionParam[targetEnum!] === 'NONE') {
          continue;
        }

        const temp = unionListToActionParam(targetEnum, this.actions.bind(this), targetEnumIndex);
        if (temp === null) {
          continue;
        }
        ret.push(temp.unpack());
      }
      return ret;
    })();
  }
}

export class ActionsParamT implements flatbuffers.IGeneratedObject {
  constructor(
    public actionsType: ActionParam[] = [],
    public actions: (AppQuitParamT | InputKeyParamT | InputMouseParamT | InputSetTextParamT | MovePlayerParamT | SleepParamT)[] = [],
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const actionsType = ActionsParam.createActionsTypeVector(builder, this.actionsType);
    const actions = ActionsParam.createActionsVector(builder, builder.createObjectOffsetList(this.actions));

    return ActionsParam.createActionsParam(builder, actionsType, actions);
  }
}
