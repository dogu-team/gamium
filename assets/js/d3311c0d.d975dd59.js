"use strict";(self.webpackChunkgamium_docs=self.webpackChunkgamium_docs||[]).push([[8305],{84:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(3289);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=s(t),m=i,g=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(g,a(a({ref:n},l),{},{components:t})):r.createElement(g,a({ref:n},l))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var p={};for(var u in n)hasOwnProperty.call(n,u)&&(p[u]=n[u]);p.originalType=e,p[c]="string"==typeof e?e:i,a[1]=p;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=t(4715),i=(t(3289),t(84));const o={sidebar_position:3,title:"Configure Server",toc_max_heading_level:4},a=void 0,p={unversionedId:"docs/engine/unity/server-configuration",id:"docs/engine/unity/server-configuration",title:"Configure Server",description:"The settings for the Gamium Engine can be configured by project.",source:"@site/docs/docs/engine/unity/server-configuration.mdx",sourceDirName:"docs/engine/unity",slug:"/docs/engine/unity/server-configuration",permalink:"/gamium/docs/engine/unity/server-configuration",draft:!1,editUrl:"https://github.com/dogu-team/gamium/tree/main/docs/docs/docs/engine/unity/server-configuration.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Configure Server",toc_max_heading_level:4},sidebar:"docsSidebar",previous:{title:"Using GamiumEditor",permalink:"/gamium/docs/engine/unity/query-objects"},next:{title:"Configure Input",permalink:"/gamium/docs/engine/unity/Input-configuration"}},u={},s=[{value:"Gamium.ServerBuilder",id:"gamiumserverbuilder",level:2},{value:"Usage",id:"usage",level:4},{value:"Port",id:"port",level:3},{value:"Input Mapping",id:"input-mapping",level:3}],l={toc:s},c="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The settings for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine")," can be configured by project."),(0,i.kt)("h2",{id:"gamiumserverbuilder"},"Gamium.ServerBuilder"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServerBuilder")," provides the ability to configure and run ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine"),". It can be set up as below through ",(0,i.kt)("inlineCode",{parentName:"p"},"ServerConfig"),"."),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'new ServerBuilder()\n    .SetConfig(new ServerConfig\n    {\n        port = 50061,\n        inputMappings = new InputMapping[]\n        {\n            new InputMapping()\n            {\n                alias = "Horizontal", positiveCodes = new HashSet<KeyCode>() { KeyCode.D },\n                negativeCodes = new HashSet<KeyCode>() { KeyCode.A }\n            },\n            new InputMapping()\n            {\n                alias = "Vertical", positiveCodes = new HashSet<KeyCode>() { KeyCode.W },\n                negativeCodes = new HashSet<KeyCode>() { KeyCode.S }\n            },\n        },\n    }).Run();\n')),(0,i.kt)("h3",{id:"port"},"Port"),(0,i.kt)("p",null,"The port on which ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine")," is listening to receive data. Port can be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"ServerConfig"),".\nIf you do not set any value for port, it is set to 50061. To use ",(0,i.kt)("inlineCode",{parentName:"p"},"Inspector")," in the ",(0,i.kt)("a",{parentName:"p",href:"https://dogutech.io"},"Dogu Console"),", we recommend that you use the 50061 port as it is."),(0,i.kt)("h3",{id:"input-mapping"},"Input Mapping"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Client")," allows keyboard input to be transferred using the function ",(0,i.kt)("a",{parentName:"p",href:"../../../api/client/typescript/classes/gamium-client#sendkey-"},"sendKey"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine")," can take these keyboard inputs and process the ",(0,i.kt)("inlineCode",{parentName:"p"},"Horizontal")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Vertical")," inputs."))}d.isMDXComponent=!0}}]);