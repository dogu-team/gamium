// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { ExecuteRpcBy } from "../../../gamium/protocol/types/execute-rpc-by.js";

export class ExecuteRpcParam
  implements flatbuffers.IUnpackableObject<ExecuteRpcParamT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ExecuteRpcParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsExecuteRpcParam(
    bb: flatbuffers.ByteBuffer,
    obj?: ExecuteRpcParam
  ): ExecuteRpcParam {
    return (obj || new ExecuteRpcParam()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsExecuteRpcParam(
    bb: flatbuffers.ByteBuffer,
    obj?: ExecuteRpcParam
  ): ExecuteRpcParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ExecuteRpcParam()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  by(): ExecuteRpcBy {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readInt16(this.bb_pos + offset)
      : ExecuteRpcBy.Method;
  }

  className(): string | null;
  className(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  className(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  targetName(): string | null;
  targetName(
    optionalEncoding: flatbuffers.Encoding
  ): string | Uint8Array | null;
  targetName(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  paramDocuments(index: number): string;
  paramDocuments(
    index: number,
    optionalEncoding: flatbuffers.Encoding
  ): string | Uint8Array;
  paramDocuments(
    index: number,
    optionalEncoding?: any
  ): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset
      ? this.bb!.__string(
          this.bb!.__vector(this.bb_pos + offset) + index * 4,
          optionalEncoding
        )
      : null;
  }

  paramDocumentsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startExecuteRpcParam(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addBy(builder: flatbuffers.Builder, by: ExecuteRpcBy) {
    builder.addFieldInt16(0, by, ExecuteRpcBy.Method);
  }

  static addClassName(
    builder: flatbuffers.Builder,
    classNameOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, classNameOffset, 0);
  }

  static addTargetName(
    builder: flatbuffers.Builder,
    targetNameOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(2, targetNameOffset, 0);
  }

  static addParamDocuments(
    builder: flatbuffers.Builder,
    paramDocumentsOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(3, paramDocumentsOffset, 0);
  }

  static createParamDocumentsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startParamDocumentsVector(
    builder: flatbuffers.Builder,
    numElems: number
  ) {
    builder.startVector(4, numElems, 4);
  }

  static endExecuteRpcParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createExecuteRpcParam(
    builder: flatbuffers.Builder,
    by: ExecuteRpcBy,
    classNameOffset: flatbuffers.Offset,
    targetNameOffset: flatbuffers.Offset,
    paramDocumentsOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    ExecuteRpcParam.startExecuteRpcParam(builder);
    ExecuteRpcParam.addBy(builder, by);
    ExecuteRpcParam.addClassName(builder, classNameOffset);
    ExecuteRpcParam.addTargetName(builder, targetNameOffset);
    ExecuteRpcParam.addParamDocuments(builder, paramDocumentsOffset);
    return ExecuteRpcParam.endExecuteRpcParam(builder);
  }

  unpack(): ExecuteRpcParamT {
    return new ExecuteRpcParamT(
      this.by(),
      this.className(),
      this.targetName(),
      this.bb!.createScalarList<string>(
        this.paramDocuments.bind(this),
        this.paramDocumentsLength()
      )
    );
  }

  unpackTo(_o: ExecuteRpcParamT): void {
    _o.by = this.by();
    _o.className = this.className();
    _o.targetName = this.targetName();
    _o.paramDocuments = this.bb!.createScalarList<string>(
      this.paramDocuments.bind(this),
      this.paramDocumentsLength()
    );
  }
}

export class ExecuteRpcParamT implements flatbuffers.IGeneratedObject {
  constructor(
    public by: ExecuteRpcBy = ExecuteRpcBy.Method,
    public className: string | Uint8Array | null = null,
    public targetName: string | Uint8Array | null = null,
    public paramDocuments: string[] = []
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const className =
      this.className !== null ? builder.createString(this.className!) : 0;
    const targetName =
      this.targetName !== null ? builder.createString(this.targetName!) : 0;
    const paramDocuments = ExecuteRpcParam.createParamDocumentsVector(
      builder,
      builder.createObjectOffsetList(this.paramDocuments)
    );

    return ExecuteRpcParam.createExecuteRpcParam(
      builder,
      this.by,
      className,
      targetName,
      paramDocuments
    );
  }
}
