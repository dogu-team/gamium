"use strict";(self.webpackChunkgamium_docs=self.webpackChunkgamium_docs||[]).push([[9901],{84:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var r=t(3289);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=l(t),g=i,d=m["".concat(p,".").concat(g)]||m[g]||c[g]||a;return t?r.createElement(d,o(o({ref:n},s),{},{components:t})):r.createElement(d,o({ref:n},s))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u[m]="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7772:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var r=t(4715),i=(t(3289),t(84));const a={sidebar_position:3,title:"Configure Server",toc_max_heading_level:4},o=void 0,u={unversionedId:"gamium/engine/unity/server-configuration",id:"gamium/engine/unity/server-configuration",title:"Configure Server",description:"The settings for the Gamium Engine can be configured by project.",source:"@site/docs/gamium/engine/unity/server-configuration.mdx",sourceDirName:"gamium/engine/unity",slug:"/gamium/engine/unity/server-configuration",permalink:"/gamium/gamium/engine/unity/server-configuration",draft:!1,editUrl:"https://github.com/dogu-team/gamium/tree/main/docs/docs/gamium/engine/unity/server-configuration.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Configure Server",toc_max_heading_level:4},sidebar:"docsSidebar",previous:{title:"Using GamiumEditor",permalink:"/gamium/gamium/engine/unity/query-objects"},next:{title:"Configure Input",permalink:"/gamium/gamium/engine/unity/Input-configuration"}},p={},l=[{value:"Gamium.ServerBuilder",id:"gamiumserverbuilder",level:2},{value:"Usage",id:"usage",level:4},{value:"Port",id:"port",level:3},{value:"Input Mapping",id:"input-mapping",level:3}],s={toc:l},m="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The settings for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine")," can be configured by project."),(0,i.kt)("h2",{id:"gamiumserverbuilder"},"Gamium.ServerBuilder"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServerBuilder")," provides the ability to configure and run ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine"),". It can be set up as below through ",(0,i.kt)("inlineCode",{parentName:"p"},"ServerConfig"),"."),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'new ServerBuilder()\n    .SetConfig(new ServerConfig\n    {\n        port = 50061\n        inputMappings = new InputMapping[]\n        {\n            new InputMapping()\n            {\n                alias = "Horizontal", positiveCodes = new HashSet<KeyCode>() { KeyCode.D },\n                negativeCodes = new HashSet<KeyCode>() { KeyCode.A }\n            },\n            new InputMapping()\n            {\n                alias = "Vertical", positiveCodes = new HashSet<KeyCode>() { KeyCode.W },\n                negativeCodes = new HashSet<KeyCode>() { KeyCode.S }\n            },\n        },\n    }).Run();\n')),(0,i.kt)("h3",{id:"port"},"Port"),(0,i.kt)("p",null,"The port on which ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine")," is listening to receive data. Port can be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"ServerConfig"),".\nIf you do not set any value for port, it is set to 50061. To use ",(0,i.kt)("inlineCode",{parentName:"p"},"Inspector")," in the ",(0,i.kt)("a",{parentName:"p",href:"https://dogutech.io"},"Dogu Console"),", we recommend that you use the 50061 port as it is."),(0,i.kt)("h3",{id:"input-mapping"},"Input Mapping"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Client")," allows keyboard input to be transferred using the function ","[sendKey]"," (../gamium-client/api/client/typescript/classes/gamium-client#sendkey-).\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Gamium Engine")," can take these keyboard inputs and process the ",(0,i.kt)("inlineCode",{parentName:"p"},"Horizontal")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Vertical")," inputs."))}c.isMDXComponent=!0}}]);