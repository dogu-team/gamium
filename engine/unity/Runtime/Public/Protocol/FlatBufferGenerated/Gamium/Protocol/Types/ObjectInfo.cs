// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Types
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ObjectInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static ObjectInfo GetRootAsObjectInfo(ByteBuffer _bb) { return GetRootAsObjectInfo(_bb, new ObjectInfo()); }
  public static ObjectInfo GetRootAsObjectInfo(ByteBuffer _bb, ObjectInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObjectInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public Gamium.Protocol.Types.ObjectType Type { get { int o = __p.__offset(8); return o != 0 ? (Gamium.Protocol.Types.ObjectType)__p.bb.GetShort(o + __p.bb_pos) : Gamium.Protocol.Types.ObjectType.Unknown; } }
  public string Tag(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsActive { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public Gamium.Protocol.Types.Vector3? ScreenPosition { get { int o = __p.__offset(14); return o != 0 ? (Gamium.Protocol.Types.Vector3?)(new Gamium.Protocol.Types.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Gamium.Protocol.Types.Vector2? ScreenRectSize { get { int o = __p.__offset(16); return o != 0 ? (Gamium.Protocol.Types.Vector2?)(new Gamium.Protocol.Types.Vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Gamium.Protocol.Types.Vector3? Position { get { int o = __p.__offset(18); return o != 0 ? (Gamium.Protocol.Types.Vector3?)(new Gamium.Protocol.Types.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Gamium.Protocol.Types.Vector4? Rotation { get { int o = __p.__offset(20); return o != 0 ? (Gamium.Protocol.Types.Vector4?)(new Gamium.Protocol.Types.Vector4()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Text { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<Gamium.Protocol.Types.ObjectInfo> CreateObjectInfo(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      Gamium.Protocol.Types.ObjectType type = Gamium.Protocol.Types.ObjectType.Unknown,
      VectorOffset tagOffset = default(VectorOffset),
      bool is_active = false,
      Gamium.Protocol.Types.Vector3T screen_position = null,
      Gamium.Protocol.Types.Vector2T screen_rect_size = null,
      Gamium.Protocol.Types.Vector3T position = null,
      Gamium.Protocol.Types.Vector4T rotation = null,
      StringOffset textOffset = default(StringOffset)) {
    builder.StartTable(10);
    ObjectInfo.AddText(builder, textOffset);
    ObjectInfo.AddRotation(builder, Gamium.Protocol.Types.Vector4.Pack(builder, rotation));
    ObjectInfo.AddPosition(builder, Gamium.Protocol.Types.Vector3.Pack(builder, position));
    ObjectInfo.AddScreenRectSize(builder, Gamium.Protocol.Types.Vector2.Pack(builder, screen_rect_size));
    ObjectInfo.AddScreenPosition(builder, Gamium.Protocol.Types.Vector3.Pack(builder, screen_position));
    ObjectInfo.AddTag(builder, tagOffset);
    ObjectInfo.AddName(builder, nameOffset);
    ObjectInfo.AddPath(builder, pathOffset);
    ObjectInfo.AddType(builder, type);
    ObjectInfo.AddIsActive(builder, is_active);
    return ObjectInfo.EndObjectInfo(builder);
  }

  public static void StartObjectInfo(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Gamium.Protocol.Types.ObjectType type) { builder.AddShort(2, (short)type, 0); }
  public static void AddTag(FlatBufferBuilder builder, VectorOffset tagOffset) { builder.AddOffset(3, tagOffset.Value, 0); }
  public static VectorOffset CreateTagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsActive(FlatBufferBuilder builder, bool isActive) { builder.AddBool(4, isActive, false); }
  public static void AddScreenPosition(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.Vector3> screenPositionOffset) { builder.AddStruct(5, screenPositionOffset.Value, 0); }
  public static void AddScreenRectSize(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.Vector2> screenRectSizeOffset) { builder.AddStruct(6, screenRectSizeOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.Vector3> positionOffset) { builder.AddStruct(7, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.Vector4> rotationOffset) { builder.AddStruct(8, rotationOffset.Value, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(9, textOffset.Value, 0); }
  public static Offset<Gamium.Protocol.Types.ObjectInfo> EndObjectInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // path
    builder.Required(o, 14);  // screen_position
    builder.Required(o, 18);  // position
    builder.Required(o, 20);  // rotation
    return new Offset<Gamium.Protocol.Types.ObjectInfo>(o);
  }
  public ObjectInfoT UnPack() {
    var _o = new ObjectInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ObjectInfoT _o) {
    _o.Path = this.Path;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Tag = new List<string>();
    for (var _j = 0; _j < this.TagLength; ++_j) {_o.Tag.Add(this.Tag(_j));}
    _o.IsActive = this.IsActive;
    _o.ScreenPosition = this.ScreenPosition.HasValue ? this.ScreenPosition.Value.UnPack() : null;
    _o.ScreenRectSize = this.ScreenRectSize.HasValue ? this.ScreenRectSize.Value.UnPack() : null;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Text = this.Text;
  }
  public static Offset<Gamium.Protocol.Types.ObjectInfo> Pack(FlatBufferBuilder builder, ObjectInfoT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Types.ObjectInfo>);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _tag = default(VectorOffset);
    if (_o.Tag != null) {
      var __tag = new StringOffset[_o.Tag.Count];
      for (var _j = 0; _j < __tag.Length; ++_j) { __tag[_j] = builder.CreateString(_o.Tag[_j]); }
      _tag = CreateTagVector(builder, __tag);
    }
    var _text = _o.Text == null ? default(StringOffset) : builder.CreateString(_o.Text);
    return CreateObjectInfo(
      builder,
      _path,
      _name,
      _o.Type,
      _tag,
      _o.IsActive,
      _o.ScreenPosition,
      _o.ScreenRectSize,
      _o.Position,
      _o.Rotation,
      _text);
  }
}

public class ObjectInfoT
{
  public string Path { get; set; }
  public string Name { get; set; }
  public Gamium.Protocol.Types.ObjectType Type { get; set; }
  public List<string> Tag { get; set; }
  public bool IsActive { get; set; }
  public Gamium.Protocol.Types.Vector3T ScreenPosition { get; set; }
  public Gamium.Protocol.Types.Vector2T ScreenRectSize { get; set; }
  public Gamium.Protocol.Types.Vector3T Position { get; set; }
  public Gamium.Protocol.Types.Vector4T Rotation { get; set; }
  public string Text { get; set; }

  public ObjectInfoT() {
    this.Path = null;
    this.Name = null;
    this.Type = Gamium.Protocol.Types.ObjectType.Unknown;
    this.Tag = null;
    this.IsActive = false;
    this.ScreenPosition = new Gamium.Protocol.Types.Vector3T();
    this.ScreenRectSize = new Gamium.Protocol.Types.Vector2T();
    this.Position = new Gamium.Protocol.Types.Vector3T();
    this.Rotation = new Gamium.Protocol.Types.Vector4T();
    this.Text = null;
  }
}


}
