// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InspectObjectOnScreenParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static InspectObjectOnScreenParam GetRootAsInspectObjectOnScreenParam(ByteBuffer _bb) { return GetRootAsInspectObjectOnScreenParam(_bb, new InspectObjectOnScreenParam()); }
  public static InspectObjectOnScreenParam GetRootAsInspectObjectOnScreenParam(ByteBuffer _bb, InspectObjectOnScreenParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InspectObjectOnScreenParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Gamium.Protocol.Types.Vector2? Pos { get { int o = __p.__offset(4); return o != 0 ? (Gamium.Protocol.Types.Vector2?)(new Gamium.Protocol.Types.Vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Gamium.Protocol.Types.Vector2? ScreenSize { get { int o = __p.__offset(6); return o != 0 ? (Gamium.Protocol.Types.Vector2?)(new Gamium.Protocol.Types.Vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartInspectObjectOnScreenParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.Vector2> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static void AddScreenSize(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.Vector2> screenSizeOffset) { builder.AddStruct(1, screenSizeOffset.Value, 0); }
  public static Offset<Gamium.Protocol.Packets.InspectObjectOnScreenParam> EndInspectObjectOnScreenParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.InspectObjectOnScreenParam>(o);
  }
  public InspectObjectOnScreenParamT UnPack() {
    var _o = new InspectObjectOnScreenParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InspectObjectOnScreenParamT _o) {
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
    _o.ScreenSize = this.ScreenSize.HasValue ? this.ScreenSize.Value.UnPack() : null;
  }
  public static Offset<Gamium.Protocol.Packets.InspectObjectOnScreenParam> Pack(FlatBufferBuilder builder, InspectObjectOnScreenParamT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.InspectObjectOnScreenParam>);
    StartInspectObjectOnScreenParam(builder);
    AddPos(builder, Gamium.Protocol.Types.Vector2.Pack(builder, _o.Pos));
    AddScreenSize(builder, Gamium.Protocol.Types.Vector2.Pack(builder, _o.ScreenSize));
    return EndInspectObjectOnScreenParam(builder);
  }
}

public class InspectObjectOnScreenParamT
{
  public Gamium.Protocol.Types.Vector2T Pos { get; set; }
  public Gamium.Protocol.Types.Vector2T ScreenSize { get; set; }

  public InspectObjectOnScreenParamT() {
    this.Pos = new Gamium.Protocol.Types.Vector2T();
    this.ScreenSize = new Gamium.Protocol.Types.Vector2T();
  }
}


}
