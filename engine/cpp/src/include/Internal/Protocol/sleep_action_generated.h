// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SLEEPACTION_GAMIUM_PROTOCOL_PACKETS_ACTIONS_H_
#define FLATBUFFERS_GENERATED_SLEEPACTION_GAMIUM_PROTOCOL_PACKETS_ACTIONS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Gamium {
namespace Protocol {
namespace Packets {
namespace Actions {

struct SleepParam;
struct SleepParamBuilder;
struct SleepParamT;

inline const flatbuffers::TypeTable *SleepParamTypeTable();

struct SleepParamT : public flatbuffers::NativeTable {
  typedef SleepParam TableType;
  uint32_t ms = 0;
};

struct SleepParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SleepParamT NativeTableType;
  typedef SleepParamBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SleepParamTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MS = 4
  };
  uint32_t ms() const {
    return GetField<uint32_t>(VT_MS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MS, 4) &&
           verifier.EndTable();
  }
  SleepParamT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SleepParamT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SleepParam> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SleepParamT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SleepParamBuilder {
  typedef SleepParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ms(uint32_t ms) {
    fbb_.AddElement<uint32_t>(SleepParam::VT_MS, ms, 0);
  }
  explicit SleepParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SleepParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SleepParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<SleepParam> CreateSleepParam(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t ms = 0) {
  SleepParamBuilder builder_(_fbb);
  builder_.add_ms(ms);
  return builder_.Finish();
}

flatbuffers::Offset<SleepParam> CreateSleepParam(flatbuffers::FlatBufferBuilder &_fbb, const SleepParamT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SleepParamT *SleepParam::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SleepParamT>(new SleepParamT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SleepParam::UnPackTo(SleepParamT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = ms(); _o->ms = _e; }
}

inline flatbuffers::Offset<SleepParam> SleepParam::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SleepParamT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSleepParam(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SleepParam> CreateSleepParam(flatbuffers::FlatBufferBuilder &_fbb, const SleepParamT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SleepParamT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _ms = _o->ms;
  return Gamium::Protocol::Packets::Actions::CreateSleepParam(
      _fbb,
      _ms);
}

inline const flatbuffers::TypeTable *SleepParamTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

}  // namespace Actions
}  // namespace Packets
}  // namespace Protocol
}  // namespace Gamium

#endif  // FLATBUFFERS_GENERATED_SLEEPACTION_GAMIUM_PROTOCOL_PACKETS_ACTIONS_H_
