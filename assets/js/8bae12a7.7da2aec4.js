"use strict";(self.webpackChunkgamium_docs=self.webpackChunkgamium_docs||[]).push([[5720],{84:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>f});var n=o(3289);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(o),d=r,f=s["".concat(c,".").concat(d)]||s[d]||m[d]||a;return o?n.createElement(f,i(i({ref:t},u),{},{components:o})):n.createElement(f,i({ref:t},u))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=o[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},5478:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=o(4715),r=(o(3289),o(84));const a={sidebar_position:2,toc_max_heading_level:4,title:"Protocol Development"},i="Protocol Development",l={unversionedId:"docs/contributing/protocol-development",id:"docs/contributing/protocol-development",title:"Protocol Development",description:"Control protocol",source:"@site/docs/docs/contributing/protocol-development.mdx",sourceDirName:"docs/contributing",slug:"/docs/contributing/protocol-development",permalink:"/gamium/docs/contributing/protocol-development",draft:!1,editUrl:"https://github.com/dogu-team/gamium/tree/main/docs/docs/docs/contributing/protocol-development.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,toc_max_heading_level:4,title:"Protocol Development"},sidebar:"docsSidebar",previous:{title:"Source Code Organization",permalink:"/gamium/docs/contributing/source-code-organization"},next:{title:"Unity",permalink:"/gamium/docs/contributing/engine-development/unity"}},c={},p=[{value:"Control protocol",id:"control-protocol",level:4},{value:"Define schema",id:"define-schema",level:4},{value:"Export protocol",id:"export-protocol",level:4},{value:"Update Unity meta files",id:"update-unity-meta-files",level:4}],u={toc:p},s="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(s,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"protocol-development"},"Protocol Development"),(0,r.kt)("h4",{id:"control-protocol"},"Control protocol"),(0,r.kt)("p",null,"The Gamium Client communicates continuously to control the Gamium Engine. To this end, the Gamium Client and Gamium Engine share a protocol for communication. This protocol was defined using ",(0,r.kt)("a",{parentName:"p",href:"https://google.github.io/flatbuffers/"},"FlatBuffers"),".",(0,r.kt)("br",{parentName:"p"}),"\n",'Protocols defined through ".fbs" files are extracted in various languages, and the extracted protocols are used by Gamium Client and Gamium Engine.'),(0,r.kt)("mermaid",{value:"graph TD\n    subgraph protocol\n        FBS[.fbs]\n    end\n    subgraph client\n        python[.py]\n        typescript[.ts]\n    end\n    subgraph server\n        unity[.cs]\n        unreal[.cpp]\n    end\n    protocol--\x3epython\n    protocol--\x3etypescript\n    protocol--\x3eunity\n    protocol--\x3eunreal"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Flatbuffer is a binary serialization format that allows you to create a schema for your data and then compile it into a binary format that can be used in many different programming languages.  ")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"If you change the Gamium protocol, all engine and client interfaces must be checked.")),(0,r.kt)("h4",{id:"define-schema"},"Define schema"),(0,r.kt)("p",null,"The schema files is located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"protocol/fbs")," folder.",(0,r.kt)("br",{parentName:"p"}),"\n","Please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://flatbuffers.dev/flatbuffers_guide_writing_schema.html"},(0,r.kt)("strong",{parentName:"a"},"Flatbuffer official schema document"))," for the grammar of flatbuffer."),(0,r.kt)("h4",{id:"export-protocol"},"Export protocol"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd protocol\nyarn export\n")),(0,r.kt)("h4",{id:"update-unity-meta-files"},"Update Unity meta files"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd utils/typescript/unity-meta-gen\nyarn export\n")))}m.isMDXComponent=!0}}]);