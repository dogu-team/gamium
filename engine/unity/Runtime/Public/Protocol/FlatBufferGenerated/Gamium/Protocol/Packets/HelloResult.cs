// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct HelloResult : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static HelloResult GetRootAsHelloResult(ByteBuffer _bb) { return GetRootAsHelloResult(_bb, new HelloResult()); }
  public static HelloResult GetRootAsHelloResult(ByteBuffer _bb, HelloResult obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HelloResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AppName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAppNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAppNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAppNameArray() { return __p.__vector_as_array<byte>(4); }
  public string AppVersion { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAppVersionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAppVersionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAppVersionArray() { return __p.__vector_as_array<byte>(6); }
  public string GamiumVersion { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGamiumVersionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGamiumVersionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGamiumVersionArray() { return __p.__vector_as_array<byte>(8); }
  public ulong FramesFromStart { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public float SecondsFromStart { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint ClientSequence { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Gamium.Protocol.Packets.Env? Envs(int j) { int o = __p.__offset(16); return o != 0 ? (Gamium.Protocol.Packets.Env?)(new Gamium.Protocol.Packets.Env()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EnvsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Gamium.Protocol.Packets.HelloResult> CreateHelloResult(FlatBufferBuilder builder,
      StringOffset app_nameOffset = default(StringOffset),
      StringOffset app_versionOffset = default(StringOffset),
      StringOffset gamium_versionOffset = default(StringOffset),
      ulong frames_from_start = 0,
      float seconds_from_start = 0.0f,
      uint client_sequence = 0,
      VectorOffset envsOffset = default(VectorOffset)) {
    builder.StartTable(7);
    HelloResult.AddFramesFromStart(builder, frames_from_start);
    HelloResult.AddEnvs(builder, envsOffset);
    HelloResult.AddClientSequence(builder, client_sequence);
    HelloResult.AddSecondsFromStart(builder, seconds_from_start);
    HelloResult.AddGamiumVersion(builder, gamium_versionOffset);
    HelloResult.AddAppVersion(builder, app_versionOffset);
    HelloResult.AddAppName(builder, app_nameOffset);
    return HelloResult.EndHelloResult(builder);
  }

  public static void StartHelloResult(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddAppName(FlatBufferBuilder builder, StringOffset appNameOffset) { builder.AddOffset(0, appNameOffset.Value, 0); }
  public static void AddAppVersion(FlatBufferBuilder builder, StringOffset appVersionOffset) { builder.AddOffset(1, appVersionOffset.Value, 0); }
  public static void AddGamiumVersion(FlatBufferBuilder builder, StringOffset gamiumVersionOffset) { builder.AddOffset(2, gamiumVersionOffset.Value, 0); }
  public static void AddFramesFromStart(FlatBufferBuilder builder, ulong framesFromStart) { builder.AddUlong(3, framesFromStart, 0); }
  public static void AddSecondsFromStart(FlatBufferBuilder builder, float secondsFromStart) { builder.AddFloat(4, secondsFromStart, 0.0f); }
  public static void AddClientSequence(FlatBufferBuilder builder, uint clientSequence) { builder.AddUint(5, clientSequence, 0); }
  public static void AddEnvs(FlatBufferBuilder builder, VectorOffset envsOffset) { builder.AddOffset(6, envsOffset.Value, 0); }
  public static VectorOffset CreateEnvsVector(FlatBufferBuilder builder, Offset<Gamium.Protocol.Packets.Env>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnvsVectorBlock(FlatBufferBuilder builder, Offset<Gamium.Protocol.Packets.Env>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnvsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Gamium.Protocol.Packets.Env>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnvsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Gamium.Protocol.Packets.Env>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnvsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Gamium.Protocol.Packets.HelloResult> EndHelloResult(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.HelloResult>(o);
  }
  public HelloResultT UnPack() {
    var _o = new HelloResultT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HelloResultT _o) {
    _o.AppName = this.AppName;
    _o.AppVersion = this.AppVersion;
    _o.GamiumVersion = this.GamiumVersion;
    _o.FramesFromStart = this.FramesFromStart;
    _o.SecondsFromStart = this.SecondsFromStart;
    _o.ClientSequence = this.ClientSequence;
    _o.Envs = new List<Gamium.Protocol.Packets.EnvT>();
    for (var _j = 0; _j < this.EnvsLength; ++_j) {_o.Envs.Add(this.Envs(_j).HasValue ? this.Envs(_j).Value.UnPack() : null);}
  }
  public static Offset<Gamium.Protocol.Packets.HelloResult> Pack(FlatBufferBuilder builder, HelloResultT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.HelloResult>);
    var _app_name = _o.AppName == null ? default(StringOffset) : builder.CreateString(_o.AppName);
    var _app_version = _o.AppVersion == null ? default(StringOffset) : builder.CreateString(_o.AppVersion);
    var _gamium_version = _o.GamiumVersion == null ? default(StringOffset) : builder.CreateString(_o.GamiumVersion);
    var _envs = default(VectorOffset);
    if (_o.Envs != null) {
      var __envs = new Offset<Gamium.Protocol.Packets.Env>[_o.Envs.Count];
      for (var _j = 0; _j < __envs.Length; ++_j) { __envs[_j] = Gamium.Protocol.Packets.Env.Pack(builder, _o.Envs[_j]); }
      _envs = CreateEnvsVector(builder, __envs);
    }
    return CreateHelloResult(
      builder,
      _app_name,
      _app_version,
      _gamium_version,
      _o.FramesFromStart,
      _o.SecondsFromStart,
      _o.ClientSequence,
      _envs);
  }
}

public class HelloResultT
{
  public string AppName { get; set; }
  public string AppVersion { get; set; }
  public string GamiumVersion { get; set; }
  public ulong FramesFromStart { get; set; }
  public float SecondsFromStart { get; set; }
  public uint ClientSequence { get; set; }
  public List<Gamium.Protocol.Packets.EnvT> Envs { get; set; }

  public HelloResultT() {
    this.AppName = null;
    this.AppVersion = null;
    this.GamiumVersion = null;
    this.FramesFromStart = 0;
    this.SecondsFromStart = 0.0f;
    this.ClientSequence = 0;
    this.Envs = null;
  }
}


}
