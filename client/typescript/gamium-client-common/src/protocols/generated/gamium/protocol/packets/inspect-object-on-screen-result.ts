// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
  ObjectInfo,
  ObjectInfoT,
} from "../../../gamium/protocol/types/object-info.js";
import { Vector3, Vector3T } from "../../../gamium/protocol/types/vector3.js";

export class InspectObjectOnScreenResult
  implements flatbuffers.IUnpackableObject<InspectObjectOnScreenResultT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): InspectObjectOnScreenResult {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsInspectObjectOnScreenResult(
    bb: flatbuffers.ByteBuffer,
    obj?: InspectObjectOnScreenResult
  ): InspectObjectOnScreenResult {
    return (obj || new InspectObjectOnScreenResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsInspectObjectOnScreenResult(
    bb: flatbuffers.ByteBuffer,
    obj?: InspectObjectOnScreenResult
  ): InspectObjectOnScreenResult {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new InspectObjectOnScreenResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  infos(index: number, obj?: ObjectInfo): ObjectInfo | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new ObjectInfo()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb!
        )
      : null;
  }

  infosLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  hitPoint(obj?: Vector3): Vector3 | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!)
      : null;
  }

  static startInspectObjectOnScreenResult(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addInfos(
    builder: flatbuffers.Builder,
    infosOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, infosOffset, 0);
  }

  static createInfosVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startInfosVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addHitPoint(
    builder: flatbuffers.Builder,
    hitPointOffset: flatbuffers.Offset
  ) {
    builder.addFieldStruct(1, hitPointOffset, 0);
  }

  static endInspectObjectOnScreenResult(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): InspectObjectOnScreenResultT {
    return new InspectObjectOnScreenResultT(
      this.bb!.createObjList<ObjectInfo, ObjectInfoT>(
        this.infos.bind(this),
        this.infosLength()
      ),
      this.hitPoint() !== null ? this.hitPoint()!.unpack() : null
    );
  }

  unpackTo(_o: InspectObjectOnScreenResultT): void {
    _o.infos = this.bb!.createObjList<ObjectInfo, ObjectInfoT>(
      this.infos.bind(this),
      this.infosLength()
    );
    _o.hitPoint = this.hitPoint() !== null ? this.hitPoint()!.unpack() : null;
  }
}

export class InspectObjectOnScreenResultT
  implements flatbuffers.IGeneratedObject
{
  constructor(
    public infos: ObjectInfoT[] = [],
    public hitPoint: Vector3T | null = null
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const infos = InspectObjectOnScreenResult.createInfosVector(
      builder,
      builder.createObjectOffsetList(this.infos)
    );

    InspectObjectOnScreenResult.startInspectObjectOnScreenResult(builder);
    InspectObjectOnScreenResult.addInfos(builder, infos);
    InspectObjectOnScreenResult.addHitPoint(
      builder,
      this.hitPoint !== null ? this.hitPoint!.pack(builder) : 0
    );

    return InspectObjectOnScreenResult.endInspectObjectOnScreenResult(builder);
  }
}
