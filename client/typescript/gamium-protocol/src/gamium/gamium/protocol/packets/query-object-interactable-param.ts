// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class QueryObjectInteractableParam
  implements flatbuffers.IUnpackableObject<QueryObjectInteractableParamT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): QueryObjectInteractableParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsQueryObjectInteractableParam(
    bb: flatbuffers.ByteBuffer,
    obj?: QueryObjectInteractableParam
  ): QueryObjectInteractableParam {
    return (obj || new QueryObjectInteractableParam()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsQueryObjectInteractableParam(
    bb: flatbuffers.ByteBuffer,
    obj?: QueryObjectInteractableParam
  ): QueryObjectInteractableParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new QueryObjectInteractableParam()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  objectId(): string | null;
  objectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  objectId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  checkMoving(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  checkRaycast(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startQueryObjectInteractableParam(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addObjectId(
    builder: flatbuffers.Builder,
    objectIdOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, objectIdOffset, 0);
  }

  static addCheckMoving(builder: flatbuffers.Builder, checkMoving: boolean) {
    builder.addFieldInt8(1, +checkMoving, +false);
  }

  static addCheckRaycast(builder: flatbuffers.Builder, checkRaycast: boolean) {
    builder.addFieldInt8(2, +checkRaycast, +false);
  }

  static endQueryObjectInteractableParam(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createQueryObjectInteractableParam(
    builder: flatbuffers.Builder,
    objectIdOffset: flatbuffers.Offset,
    checkMoving: boolean,
    checkRaycast: boolean
  ): flatbuffers.Offset {
    QueryObjectInteractableParam.startQueryObjectInteractableParam(builder);
    QueryObjectInteractableParam.addObjectId(builder, objectIdOffset);
    QueryObjectInteractableParam.addCheckMoving(builder, checkMoving);
    QueryObjectInteractableParam.addCheckRaycast(builder, checkRaycast);
    return QueryObjectInteractableParam.endQueryObjectInteractableParam(
      builder
    );
  }

  unpack(): QueryObjectInteractableParamT {
    return new QueryObjectInteractableParamT(
      this.objectId(),
      this.checkMoving(),
      this.checkRaycast()
    );
  }

  unpackTo(_o: QueryObjectInteractableParamT): void {
    _o.objectId = this.objectId();
    _o.checkMoving = this.checkMoving();
    _o.checkRaycast = this.checkRaycast();
  }
}

export class QueryObjectInteractableParamT
  implements flatbuffers.IGeneratedObject
{
  constructor(
    public objectId: string | Uint8Array | null = null,
    public checkMoving: boolean = false,
    public checkRaycast: boolean = false
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const objectId =
      this.objectId !== null ? builder.createString(this.objectId!) : 0;

    return QueryObjectInteractableParam.createQueryObjectInteractableParam(
      builder,
      objectId,
      this.checkMoving,
      this.checkRaycast
    );
  }
}
