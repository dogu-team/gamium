// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_APPACTION_GAMIUM_PROTOCOL_PACKETS_ACTIONS_H_
#define FLATBUFFERS_GENERATED_APPACTION_GAMIUM_PROTOCOL_PACKETS_ACTIONS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Gamium {
namespace Protocol {
namespace Packets {
namespace Actions {

struct AppQuitParam;
struct AppQuitParamBuilder;
struct AppQuitParamT;

inline const flatbuffers::TypeTable *AppQuitParamTypeTable();

struct AppQuitParamT : public flatbuffers::NativeTable {
  typedef AppQuitParam TableType;
  int32_t exit_code = 0;
  uint32_t delay_ms = 0;
};

struct AppQuitParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AppQuitParamT NativeTableType;
  typedef AppQuitParamBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AppQuitParamTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXIT_CODE = 4,
    VT_DELAY_MS = 6
  };
  int32_t exit_code() const {
    return GetField<int32_t>(VT_EXIT_CODE, 0);
  }
  uint32_t delay_ms() const {
    return GetField<uint32_t>(VT_DELAY_MS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_EXIT_CODE, 4) &&
           VerifyField<uint32_t>(verifier, VT_DELAY_MS, 4) &&
           verifier.EndTable();
  }
  AppQuitParamT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AppQuitParamT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AppQuitParam> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AppQuitParamT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AppQuitParamBuilder {
  typedef AppQuitParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_exit_code(int32_t exit_code) {
    fbb_.AddElement<int32_t>(AppQuitParam::VT_EXIT_CODE, exit_code, 0);
  }
  void add_delay_ms(uint32_t delay_ms) {
    fbb_.AddElement<uint32_t>(AppQuitParam::VT_DELAY_MS, delay_ms, 0);
  }
  explicit AppQuitParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AppQuitParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AppQuitParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<AppQuitParam> CreateAppQuitParam(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t exit_code = 0,
    uint32_t delay_ms = 0) {
  AppQuitParamBuilder builder_(_fbb);
  builder_.add_delay_ms(delay_ms);
  builder_.add_exit_code(exit_code);
  return builder_.Finish();
}

flatbuffers::Offset<AppQuitParam> CreateAppQuitParam(flatbuffers::FlatBufferBuilder &_fbb, const AppQuitParamT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AppQuitParamT *AppQuitParam::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AppQuitParamT>(new AppQuitParamT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AppQuitParam::UnPackTo(AppQuitParamT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = exit_code(); _o->exit_code = _e; }
  { auto _e = delay_ms(); _o->delay_ms = _e; }
}

inline flatbuffers::Offset<AppQuitParam> AppQuitParam::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AppQuitParamT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAppQuitParam(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AppQuitParam> CreateAppQuitParam(flatbuffers::FlatBufferBuilder &_fbb, const AppQuitParamT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AppQuitParamT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _exit_code = _o->exit_code;
  auto _delay_ms = _o->delay_ms;
  return Gamium::Protocol::Packets::Actions::CreateAppQuitParam(
      _fbb,
      _exit_code,
      _delay_ms);
}

inline const flatbuffers::TypeTable *AppQuitParamTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

}  // namespace Actions
}  // namespace Packets
}  // namespace Protocol
}  // namespace Gamium

#endif  // FLATBUFFERS_GENERATED_APPACTION_GAMIUM_PROTOCOL_PACKETS_ACTIONS_H_
