// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SleepParam implements flatbuffers.IUnpackableObject<SleepParamT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): SleepParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsSleepParam(bb: flatbuffers.ByteBuffer, obj?: SleepParam): SleepParam {
    return (obj || new SleepParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsSleepParam(bb: flatbuffers.ByteBuffer, obj?: SleepParam): SleepParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new SleepParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  ms(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  static startSleepParam(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addMs(builder: flatbuffers.Builder, ms: number) {
    builder.addFieldInt32(0, ms, 0);
  }

  static endSleepParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createSleepParam(builder: flatbuffers.Builder, ms: number): flatbuffers.Offset {
    SleepParam.startSleepParam(builder);
    SleepParam.addMs(builder, ms);
    return SleepParam.endSleepParam(builder);
  }

  unpack(): SleepParamT {
    return new SleepParamT(this.ms());
  }

  unpackTo(_o: SleepParamT): void {
    _o.ms = this.ms();
  }
}

export class SleepParamT implements flatbuffers.IGeneratedObject {
  constructor(public ms: number = 0) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    return SleepParam.createSleepParam(builder, this.ms);
  }
}
