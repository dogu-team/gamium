// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Env, EnvT } from "../../../gamium/protocol/packets/env.js";

export class HelloResult
  implements flatbuffers.IUnpackableObject<HelloResultT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): HelloResult {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsHelloResult(
    bb: flatbuffers.ByteBuffer,
    obj?: HelloResult
  ): HelloResult {
    return (obj || new HelloResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsHelloResult(
    bb: flatbuffers.ByteBuffer,
    obj?: HelloResult
  ): HelloResult {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new HelloResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  appName(): string | null;
  appName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  appName(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  appVersion(): string | null;
  appVersion(
    optionalEncoding: flatbuffers.Encoding
  ): string | Uint8Array | null;
  appVersion(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  gamiumVersion(): string | null;
  gamiumVersion(
    optionalEncoding: flatbuffers.Encoding
  ): string | Uint8Array | null;
  gamiumVersion(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  framesFromStart(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt("0");
  }

  secondsFromStart(): number {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
  }

  clientSequence(): number {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  envs(index: number, obj?: Env): Env | null {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset
      ? (obj || new Env()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb!
        )
      : null;
  }

  envsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startHelloResult(builder: flatbuffers.Builder) {
    builder.startObject(7);
  }

  static addAppName(
    builder: flatbuffers.Builder,
    appNameOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, appNameOffset, 0);
  }

  static addAppVersion(
    builder: flatbuffers.Builder,
    appVersionOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, appVersionOffset, 0);
  }

  static addGamiumVersion(
    builder: flatbuffers.Builder,
    gamiumVersionOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(2, gamiumVersionOffset, 0);
  }

  static addFramesFromStart(
    builder: flatbuffers.Builder,
    framesFromStart: bigint
  ) {
    builder.addFieldInt64(3, framesFromStart, BigInt("0"));
  }

  static addSecondsFromStart(
    builder: flatbuffers.Builder,
    secondsFromStart: number
  ) {
    builder.addFieldFloat32(4, secondsFromStart, 0.0);
  }

  static addClientSequence(
    builder: flatbuffers.Builder,
    clientSequence: number
  ) {
    builder.addFieldInt32(5, clientSequence, 0);
  }

  static addEnvs(builder: flatbuffers.Builder, envsOffset: flatbuffers.Offset) {
    builder.addFieldOffset(6, envsOffset, 0);
  }

  static createEnvsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startEnvsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endHelloResult(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createHelloResult(
    builder: flatbuffers.Builder,
    appNameOffset: flatbuffers.Offset,
    appVersionOffset: flatbuffers.Offset,
    gamiumVersionOffset: flatbuffers.Offset,
    framesFromStart: bigint,
    secondsFromStart: number,
    clientSequence: number,
    envsOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    HelloResult.startHelloResult(builder);
    HelloResult.addAppName(builder, appNameOffset);
    HelloResult.addAppVersion(builder, appVersionOffset);
    HelloResult.addGamiumVersion(builder, gamiumVersionOffset);
    HelloResult.addFramesFromStart(builder, framesFromStart);
    HelloResult.addSecondsFromStart(builder, secondsFromStart);
    HelloResult.addClientSequence(builder, clientSequence);
    HelloResult.addEnvs(builder, envsOffset);
    return HelloResult.endHelloResult(builder);
  }

  unpack(): HelloResultT {
    return new HelloResultT(
      this.appName(),
      this.appVersion(),
      this.gamiumVersion(),
      this.framesFromStart(),
      this.secondsFromStart(),
      this.clientSequence(),
      this.bb!.createObjList<Env, EnvT>(this.envs.bind(this), this.envsLength())
    );
  }

  unpackTo(_o: HelloResultT): void {
    _o.appName = this.appName();
    _o.appVersion = this.appVersion();
    _o.gamiumVersion = this.gamiumVersion();
    _o.framesFromStart = this.framesFromStart();
    _o.secondsFromStart = this.secondsFromStart();
    _o.clientSequence = this.clientSequence();
    _o.envs = this.bb!.createObjList<Env, EnvT>(
      this.envs.bind(this),
      this.envsLength()
    );
  }
}

export class HelloResultT implements flatbuffers.IGeneratedObject {
  constructor(
    public appName: string | Uint8Array | null = null,
    public appVersion: string | Uint8Array | null = null,
    public gamiumVersion: string | Uint8Array | null = null,
    public framesFromStart: bigint = BigInt("0"),
    public secondsFromStart: number = 0.0,
    public clientSequence: number = 0,
    public envs: EnvT[] = []
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const appName =
      this.appName !== null ? builder.createString(this.appName!) : 0;
    const appVersion =
      this.appVersion !== null ? builder.createString(this.appVersion!) : 0;
    const gamiumVersion =
      this.gamiumVersion !== null
        ? builder.createString(this.gamiumVersion!)
        : 0;
    const envs = HelloResult.createEnvsVector(
      builder,
      builder.createObjectOffsetList(this.envs)
    );

    return HelloResult.createHelloResult(
      builder,
      appName,
      appVersion,
      gamiumVersion,
      this.framesFromStart,
      this.secondsFromStart,
      this.clientSequence,
      envs
    );
  }
}
