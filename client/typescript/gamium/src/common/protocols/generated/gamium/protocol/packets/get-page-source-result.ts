// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class GetPageSourceResult implements flatbuffers.IUnpackableObject<GetPageSourceResultT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): GetPageSourceResult {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsGetPageSourceResult(bb: flatbuffers.ByteBuffer, obj?: GetPageSourceResult): GetPageSourceResult {
    return (obj || new GetPageSourceResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsGetPageSourceResult(bb: flatbuffers.ByteBuffer, obj?: GetPageSourceResult): GetPageSourceResult {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new GetPageSourceResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  pageSource(): string | null;
  pageSource(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  pageSource(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startGetPageSourceResult(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addPageSource(builder: flatbuffers.Builder, pageSourceOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, pageSourceOffset, 0);
  }

  static endGetPageSourceResult(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createGetPageSourceResult(builder: flatbuffers.Builder, pageSourceOffset: flatbuffers.Offset): flatbuffers.Offset {
    GetPageSourceResult.startGetPageSourceResult(builder);
    GetPageSourceResult.addPageSource(builder, pageSourceOffset);
    return GetPageSourceResult.endGetPageSourceResult(builder);
  }

  unpack(): GetPageSourceResultT {
    return new GetPageSourceResultT(this.pageSource());
  }

  unpackTo(_o: GetPageSourceResultT): void {
    _o.pageSource = this.pageSource();
  }
}

export class GetPageSourceResultT implements flatbuffers.IGeneratedObject {
  constructor(public pageSource: string | Uint8Array | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const pageSource = this.pageSource !== null ? builder.createString(this.pageSource!) : 0;

    return GetPageSourceResult.createGetPageSourceResult(builder, pageSource);
  }
}
