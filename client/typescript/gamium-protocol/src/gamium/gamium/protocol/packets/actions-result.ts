// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
  ActionResult,
  ActionResultT,
} from "../../../gamium/protocol/packets/action-result.js";

export class ActionsResult
  implements flatbuffers.IUnpackableObject<ActionsResultT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ActionsResult {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsActionsResult(
    bb: flatbuffers.ByteBuffer,
    obj?: ActionsResult
  ): ActionsResult {
    return (obj || new ActionsResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsActionsResult(
    bb: flatbuffers.ByteBuffer,
    obj?: ActionsResult
  ): ActionsResult {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ActionsResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  results(index: number, obj?: ActionResult): ActionResult | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new ActionResult()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4
          ),
          this.bb!
        )
      : null;
  }

  resultsLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startActionsResult(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addResults(
    builder: flatbuffers.Builder,
    resultsOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, resultsOffset, 0);
  }

  static createResultsVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[]
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startResultsVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endActionsResult(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createActionsResult(
    builder: flatbuffers.Builder,
    resultsOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    ActionsResult.startActionsResult(builder);
    ActionsResult.addResults(builder, resultsOffset);
    return ActionsResult.endActionsResult(builder);
  }

  unpack(): ActionsResultT {
    return new ActionsResultT(
      this.bb!.createObjList<ActionResult, ActionResultT>(
        this.results.bind(this),
        this.resultsLength()
      )
    );
  }

  unpackTo(_o: ActionsResultT): void {
    _o.results = this.bb!.createObjList<ActionResult, ActionResultT>(
      this.results.bind(this),
      this.resultsLength()
    );
  }
}

export class ActionsResultT implements flatbuffers.IGeneratedObject {
  constructor(public results: ActionResultT[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const results = ActionsResult.createResultsVector(
      builder,
      builder.createObjectOffsetList(this.results)
    );

    return ActionsResult.createActionsResult(builder, results);
  }
}
