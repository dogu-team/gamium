// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class InputSetTextParam implements flatbuffers.IUnpackableObject<InputSetTextParamT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): InputSetTextParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsInputSetTextParam(bb: flatbuffers.ByteBuffer, obj?: InputSetTextParam): InputSetTextParam {
    return (obj || new InputSetTextParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsInputSetTextParam(bb: flatbuffers.ByteBuffer, obj?: InputSetTextParam): InputSetTextParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new InputSetTextParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  objectId(): string | null;
  objectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  objectId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  text(): string | null;
  text(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  text(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startInputSetTextParam(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addObjectId(builder: flatbuffers.Builder, objectIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, objectIdOffset, 0);
  }

  static addText(builder: flatbuffers.Builder, textOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, textOffset, 0);
  }

  static endInputSetTextParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createInputSetTextParam(builder: flatbuffers.Builder, objectIdOffset: flatbuffers.Offset, textOffset: flatbuffers.Offset): flatbuffers.Offset {
    InputSetTextParam.startInputSetTextParam(builder);
    InputSetTextParam.addObjectId(builder, objectIdOffset);
    InputSetTextParam.addText(builder, textOffset);
    return InputSetTextParam.endInputSetTextParam(builder);
  }

  unpack(): InputSetTextParamT {
    return new InputSetTextParamT(this.objectId(), this.text());
  }

  unpackTo(_o: InputSetTextParamT): void {
    _o.objectId = this.objectId();
    _o.text = this.text();
  }
}

export class InputSetTextParamT implements flatbuffers.IGeneratedObject {
  constructor(public objectId: string | Uint8Array | null = null, public text: string | Uint8Array | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const objectId = this.objectId !== null ? builder.createString(this.objectId!) : 0;
    const text = this.text !== null ? builder.createString(this.text!) : 0;

    return InputSetTextParam.createInputSetTextParam(builder, objectId, text);
  }
}
