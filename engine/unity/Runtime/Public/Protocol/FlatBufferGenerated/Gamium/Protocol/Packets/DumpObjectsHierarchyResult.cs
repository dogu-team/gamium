// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DumpObjectsHierarchyResult : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static DumpObjectsHierarchyResult GetRootAsDumpObjectsHierarchyResult(ByteBuffer _bb) { return GetRootAsDumpObjectsHierarchyResult(_bb, new DumpObjectsHierarchyResult()); }
  public static DumpObjectsHierarchyResult GetRootAsDumpObjectsHierarchyResult(ByteBuffer _bb, DumpObjectsHierarchyResult obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DumpObjectsHierarchyResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Gamium.Protocol.Types.ObjectsHierarchy? Hierarchies(int j) { int o = __p.__offset(4); return o != 0 ? (Gamium.Protocol.Types.ObjectsHierarchy?)(new Gamium.Protocol.Types.ObjectsHierarchy()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int HierarchiesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Gamium.Protocol.Packets.DumpObjectsHierarchyResult> CreateDumpObjectsHierarchyResult(FlatBufferBuilder builder,
      VectorOffset hierarchiesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DumpObjectsHierarchyResult.AddHierarchies(builder, hierarchiesOffset);
    return DumpObjectsHierarchyResult.EndDumpObjectsHierarchyResult(builder);
  }

  public static void StartDumpObjectsHierarchyResult(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddHierarchies(FlatBufferBuilder builder, VectorOffset hierarchiesOffset) { builder.AddOffset(0, hierarchiesOffset.Value, 0); }
  public static VectorOffset CreateHierarchiesVector(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.ObjectsHierarchy>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHierarchiesVectorBlock(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.ObjectsHierarchy>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHierarchiesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Gamium.Protocol.Types.ObjectsHierarchy>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHierarchiesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Gamium.Protocol.Types.ObjectsHierarchy>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHierarchiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Gamium.Protocol.Packets.DumpObjectsHierarchyResult> EndDumpObjectsHierarchyResult(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.DumpObjectsHierarchyResult>(o);
  }
  public DumpObjectsHierarchyResultT UnPack() {
    var _o = new DumpObjectsHierarchyResultT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DumpObjectsHierarchyResultT _o) {
    _o.Hierarchies = new List<Gamium.Protocol.Types.ObjectsHierarchyT>();
    for (var _j = 0; _j < this.HierarchiesLength; ++_j) {_o.Hierarchies.Add(this.Hierarchies(_j).HasValue ? this.Hierarchies(_j).Value.UnPack() : null);}
  }
  public static Offset<Gamium.Protocol.Packets.DumpObjectsHierarchyResult> Pack(FlatBufferBuilder builder, DumpObjectsHierarchyResultT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.DumpObjectsHierarchyResult>);
    var _hierarchies = default(VectorOffset);
    if (_o.Hierarchies != null) {
      var __hierarchies = new Offset<Gamium.Protocol.Types.ObjectsHierarchy>[_o.Hierarchies.Count];
      for (var _j = 0; _j < __hierarchies.Length; ++_j) { __hierarchies[_j] = Gamium.Protocol.Types.ObjectsHierarchy.Pack(builder, _o.Hierarchies[_j]); }
      _hierarchies = CreateHierarchiesVector(builder, __hierarchies);
    }
    return CreateDumpObjectsHierarchyResult(
      builder,
      _hierarchies);
  }
}

public class DumpObjectsHierarchyResultT
{
  public List<Gamium.Protocol.Types.ObjectsHierarchyT> Hierarchies { get; set; }

  public DumpObjectsHierarchyResultT() {
    this.Hierarchies = null;
  }
}


}
