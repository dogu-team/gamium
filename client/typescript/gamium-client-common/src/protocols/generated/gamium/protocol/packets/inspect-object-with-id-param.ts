// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class InspectObjectWithIdParam
  implements flatbuffers.IUnpackableObject<InspectObjectWithIdParamT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): InspectObjectWithIdParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsInspectObjectWithIdParam(
    bb: flatbuffers.ByteBuffer,
    obj?: InspectObjectWithIdParam
  ): InspectObjectWithIdParam {
    return (obj || new InspectObjectWithIdParam()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsInspectObjectWithIdParam(
    bb: flatbuffers.ByteBuffer,
    obj?: InspectObjectWithIdParam
  ): InspectObjectWithIdParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new InspectObjectWithIdParam()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  objectId(): string | null;
  objectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  objectId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startInspectObjectWithIdParam(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addObjectId(
    builder: flatbuffers.Builder,
    objectIdOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, objectIdOffset, 0);
  }

  static endInspectObjectWithIdParam(
    builder: flatbuffers.Builder
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createInspectObjectWithIdParam(
    builder: flatbuffers.Builder,
    objectIdOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    InspectObjectWithIdParam.startInspectObjectWithIdParam(builder);
    InspectObjectWithIdParam.addObjectId(builder, objectIdOffset);
    return InspectObjectWithIdParam.endInspectObjectWithIdParam(builder);
  }

  unpack(): InspectObjectWithIdParamT {
    return new InspectObjectWithIdParamT(this.objectId());
  }

  unpackTo(_o: InspectObjectWithIdParamT): void {
    _o.objectId = this.objectId();
  }
}

export class InspectObjectWithIdParamT implements flatbuffers.IGeneratedObject {
  constructor(public objectId: string | Uint8Array | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const objectId =
      this.objectId !== null ? builder.createString(this.objectId!) : 0;

    return InspectObjectWithIdParam.createInspectObjectWithIdParam(
      builder,
      objectId
    );
  }
}
