// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXECUTEPACKET_GAMIUM_PROTOCOL_PACKETS_H_
#define FLATBUFFERS_GENERATED_EXECUTEPACKET_GAMIUM_PROTOCOL_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "execute_generated.h"

namespace Gamium {
namespace Protocol {
namespace Packets {

struct ExecuteRpcParam;
struct ExecuteRpcParamBuilder;
struct ExecuteRpcParamT;

struct ExecuteRpcResult;
struct ExecuteRpcResultBuilder;
struct ExecuteRpcResultT;

inline const flatbuffers::TypeTable *ExecuteRpcParamTypeTable();

inline const flatbuffers::TypeTable *ExecuteRpcResultTypeTable();

struct ExecuteRpcParamT : public flatbuffers::NativeTable {
  typedef ExecuteRpcParam TableType;
  Gamium::Protocol::Types::ExecuteRpcBy by = Gamium::Protocol::Types::ExecuteRpcBy::Method;
  std::string class_name{};
  std::string target_name{};
  std::vector<std::string> param_documents{};
};

struct ExecuteRpcParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExecuteRpcParamT NativeTableType;
  typedef ExecuteRpcParamBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ExecuteRpcParamTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BY = 4,
    VT_CLASS_NAME = 6,
    VT_TARGET_NAME = 8,
    VT_PARAM_DOCUMENTS = 10
  };
  Gamium::Protocol::Types::ExecuteRpcBy by() const {
    return static_cast<Gamium::Protocol::Types::ExecuteRpcBy>(GetField<int16_t>(VT_BY, 0));
  }
  const flatbuffers::String *class_name() const {
    return GetPointer<const flatbuffers::String *>(VT_CLASS_NAME);
  }
  const flatbuffers::String *target_name() const {
    return GetPointer<const flatbuffers::String *>(VT_TARGET_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *param_documents() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PARAM_DOCUMENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_BY, 2) &&
           VerifyOffset(verifier, VT_CLASS_NAME) &&
           verifier.VerifyString(class_name()) &&
           VerifyOffset(verifier, VT_TARGET_NAME) &&
           verifier.VerifyString(target_name()) &&
           VerifyOffset(verifier, VT_PARAM_DOCUMENTS) &&
           verifier.VerifyVector(param_documents()) &&
           verifier.VerifyVectorOfStrings(param_documents()) &&
           verifier.EndTable();
  }
  ExecuteRpcParamT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ExecuteRpcParamT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ExecuteRpcParam> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcParamT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ExecuteRpcParamBuilder {
  typedef ExecuteRpcParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_by(Gamium::Protocol::Types::ExecuteRpcBy by) {
    fbb_.AddElement<int16_t>(ExecuteRpcParam::VT_BY, static_cast<int16_t>(by), 0);
  }
  void add_class_name(flatbuffers::Offset<flatbuffers::String> class_name) {
    fbb_.AddOffset(ExecuteRpcParam::VT_CLASS_NAME, class_name);
  }
  void add_target_name(flatbuffers::Offset<flatbuffers::String> target_name) {
    fbb_.AddOffset(ExecuteRpcParam::VT_TARGET_NAME, target_name);
  }
  void add_param_documents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> param_documents) {
    fbb_.AddOffset(ExecuteRpcParam::VT_PARAM_DOCUMENTS, param_documents);
  }
  explicit ExecuteRpcParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ExecuteRpcParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExecuteRpcParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExecuteRpcParam> CreateExecuteRpcParam(
    flatbuffers::FlatBufferBuilder &_fbb,
    Gamium::Protocol::Types::ExecuteRpcBy by = Gamium::Protocol::Types::ExecuteRpcBy::Method,
    flatbuffers::Offset<flatbuffers::String> class_name = 0,
    flatbuffers::Offset<flatbuffers::String> target_name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> param_documents = 0) {
  ExecuteRpcParamBuilder builder_(_fbb);
  builder_.add_param_documents(param_documents);
  builder_.add_target_name(target_name);
  builder_.add_class_name(class_name);
  builder_.add_by(by);
  return builder_.Finish();
}

flatbuffers::Offset<ExecuteRpcParam> CreateExecuteRpcParam(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcParamT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ExecuteRpcResultT : public flatbuffers::NativeTable {
  typedef ExecuteRpcResult TableType;
  std::string document{};
};

struct ExecuteRpcResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ExecuteRpcResultT NativeTableType;
  typedef ExecuteRpcResultBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ExecuteRpcResultTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DOCUMENT = 4
  };
  const flatbuffers::String *document() const {
    return GetPointer<const flatbuffers::String *>(VT_DOCUMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DOCUMENT) &&
           verifier.VerifyString(document()) &&
           verifier.EndTable();
  }
  ExecuteRpcResultT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ExecuteRpcResultT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ExecuteRpcResult> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcResultT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ExecuteRpcResultBuilder {
  typedef ExecuteRpcResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_document(flatbuffers::Offset<flatbuffers::String> document) {
    fbb_.AddOffset(ExecuteRpcResult::VT_DOCUMENT, document);
  }
  explicit ExecuteRpcResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ExecuteRpcResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ExecuteRpcResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<ExecuteRpcResult> CreateExecuteRpcResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> document = 0) {
  ExecuteRpcResultBuilder builder_(_fbb);
  builder_.add_document(document);
  return builder_.Finish();
}

flatbuffers::Offset<ExecuteRpcResult> CreateExecuteRpcResult(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcResultT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ExecuteRpcParamT *ExecuteRpcParam::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ExecuteRpcParamT>(new ExecuteRpcParamT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ExecuteRpcParam::UnPackTo(ExecuteRpcParamT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = by(); _o->by = _e; }
  { auto _e = class_name(); if (_e) _o->class_name = _e->str(); }
  { auto _e = target_name(); if (_e) _o->target_name = _e->str(); }
  { auto _e = param_documents(); if (_e) { _o->param_documents.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->param_documents[_i] = _e->Get(_i)->str(); } } else { _o->param_documents.resize(0); } }
}

inline flatbuffers::Offset<ExecuteRpcParam> ExecuteRpcParam::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcParamT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateExecuteRpcParam(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ExecuteRpcParam> CreateExecuteRpcParam(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcParamT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ExecuteRpcParamT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _by = _o->by;
  auto _class_name = _o->class_name.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->class_name);
  auto _target_name = _o->target_name.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->target_name);
  auto _param_documents = _fbb.CreateVectorOfStrings(_o->param_documents);
  return Gamium::Protocol::Packets::CreateExecuteRpcParam(
      _fbb,
      _by,
      _class_name,
      _target_name,
      _param_documents);
}

inline ExecuteRpcResultT *ExecuteRpcResult::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ExecuteRpcResultT>(new ExecuteRpcResultT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ExecuteRpcResult::UnPackTo(ExecuteRpcResultT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = document(); if (_e) _o->document = _e->str(); }
}

inline flatbuffers::Offset<ExecuteRpcResult> ExecuteRpcResult::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcResultT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateExecuteRpcResult(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ExecuteRpcResult> CreateExecuteRpcResult(flatbuffers::FlatBufferBuilder &_fbb, const ExecuteRpcResultT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ExecuteRpcResultT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _document = _o->document.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->document);
  return Gamium::Protocol::Packets::CreateExecuteRpcResult(
      _fbb,
      _document);
}

inline const flatbuffers::TypeTable *ExecuteRpcParamTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, 0 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Gamium::Protocol::Types::ExecuteRpcByTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ExecuteRpcResultTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

}  // namespace Packets
}  // namespace Protocol
}  // namespace Gamium

#endif  // FLATBUFFERS_GENERATED_EXECUTEPACKET_GAMIUM_PROTOCOL_PACKETS_H_
