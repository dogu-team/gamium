// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Types
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ObjectHierarchyNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static ObjectHierarchyNode GetRootAsObjectHierarchyNode(ByteBuffer _bb) { return GetRootAsObjectHierarchyNode(_bb, new ObjectHierarchyNode()); }
  public static ObjectHierarchyNode GetRootAsObjectHierarchyNode(ByteBuffer _bb, ObjectHierarchyNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObjectHierarchyNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Path { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(6); }
  public Gamium.Protocol.Types.ObjectHierarchyNode? Children(int j) { int o = __p.__offset(8); return o != 0 ? (Gamium.Protocol.Types.ObjectHierarchyNode?)(new Gamium.Protocol.Types.ObjectHierarchyNode()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Gamium.Protocol.Types.ObjectHierarchyNode> CreateObjectHierarchyNode(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset pathOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ObjectHierarchyNode.AddChildren(builder, childrenOffset);
    ObjectHierarchyNode.AddPath(builder, pathOffset);
    ObjectHierarchyNode.AddName(builder, nameOffset);
    return ObjectHierarchyNode.EndObjectHierarchyNode(builder);
  }

  public static void StartObjectHierarchyNode(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(1, pathOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(2, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.ObjectHierarchyNode>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.ObjectHierarchyNode>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Gamium.Protocol.Types.ObjectHierarchyNode>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Gamium.Protocol.Types.ObjectHierarchyNode>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Gamium.Protocol.Types.ObjectHierarchyNode> EndObjectHierarchyNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // name
    builder.Required(o, 6);  // path
    return new Offset<Gamium.Protocol.Types.ObjectHierarchyNode>(o);
  }
  public ObjectHierarchyNodeT UnPack() {
    var _o = new ObjectHierarchyNodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ObjectHierarchyNodeT _o) {
    _o.Name = this.Name;
    _o.Path = this.Path;
    _o.Children = new List<Gamium.Protocol.Types.ObjectHierarchyNodeT>();
    for (var _j = 0; _j < this.ChildrenLength; ++_j) {_o.Children.Add(this.Children(_j).HasValue ? this.Children(_j).Value.UnPack() : null);}
  }
  public static Offset<Gamium.Protocol.Types.ObjectHierarchyNode> Pack(FlatBufferBuilder builder, ObjectHierarchyNodeT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Types.ObjectHierarchyNode>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    var _children = default(VectorOffset);
    if (_o.Children != null) {
      var __children = new Offset<Gamium.Protocol.Types.ObjectHierarchyNode>[_o.Children.Count];
      for (var _j = 0; _j < __children.Length; ++_j) { __children[_j] = Gamium.Protocol.Types.ObjectHierarchyNode.Pack(builder, _o.Children[_j]); }
      _children = CreateChildrenVector(builder, __children);
    }
    return CreateObjectHierarchyNode(
      builder,
      _name,
      _path,
      _children);
  }
}

public class ObjectHierarchyNodeT
{
  public string Name { get; set; }
  public string Path { get; set; }
  public List<Gamium.Protocol.Types.ObjectHierarchyNodeT> Children { get; set; }

  public ObjectHierarchyNodeT() {
    this.Name = null;
    this.Path = null;
    this.Children = null;
  }
}


}
