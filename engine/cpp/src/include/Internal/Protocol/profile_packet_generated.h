// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROFILEPACKET_GAMIUM_PROTOCOL_PACKETS_H_
#define FLATBUFFERS_GENERATED_PROFILEPACKET_GAMIUM_PROTOCOL_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Gamium {
namespace Protocol {
namespace Packets {

struct QueryProfileParam;
struct QueryProfileParamBuilder;
struct QueryProfileParamT;

struct QueryProfileResult;
struct QueryProfileResultBuilder;
struct QueryProfileResultT;

inline const flatbuffers::TypeTable *QueryProfileParamTypeTable();

inline const flatbuffers::TypeTable *QueryProfileResultTypeTable();

struct QueryProfileParamT : public flatbuffers::NativeTable {
  typedef QueryProfileParam TableType;
};

struct QueryProfileParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QueryProfileParamT NativeTableType;
  typedef QueryProfileParamBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return QueryProfileParamTypeTable();
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  QueryProfileParamT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(QueryProfileParamT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<QueryProfileParam> Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileParamT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct QueryProfileParamBuilder {
  typedef QueryProfileParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit QueryProfileParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<QueryProfileParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QueryProfileParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<QueryProfileParam> CreateQueryProfileParam(
    flatbuffers::FlatBufferBuilder &_fbb) {
  QueryProfileParamBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<QueryProfileParam> CreateQueryProfileParam(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileParamT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct QueryProfileResultT : public flatbuffers::NativeTable {
  typedef QueryProfileResult TableType;
  uint32_t fps = 0;
};

struct QueryProfileResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QueryProfileResultT NativeTableType;
  typedef QueryProfileResultBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return QueryProfileResultTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FPS = 4
  };
  uint32_t fps() const {
    return GetField<uint32_t>(VT_FPS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_FPS, 4) &&
           verifier.EndTable();
  }
  QueryProfileResultT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(QueryProfileResultT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<QueryProfileResult> Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileResultT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct QueryProfileResultBuilder {
  typedef QueryProfileResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fps(uint32_t fps) {
    fbb_.AddElement<uint32_t>(QueryProfileResult::VT_FPS, fps, 0);
  }
  explicit QueryProfileResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<QueryProfileResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QueryProfileResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<QueryProfileResult> CreateQueryProfileResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t fps = 0) {
  QueryProfileResultBuilder builder_(_fbb);
  builder_.add_fps(fps);
  return builder_.Finish();
}

flatbuffers::Offset<QueryProfileResult> CreateQueryProfileResult(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileResultT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline QueryProfileParamT *QueryProfileParam::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<QueryProfileParamT>(new QueryProfileParamT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void QueryProfileParam::UnPackTo(QueryProfileParamT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<QueryProfileParam> QueryProfileParam::Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileParamT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateQueryProfileParam(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<QueryProfileParam> CreateQueryProfileParam(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileParamT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const QueryProfileParamT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return Gamium::Protocol::Packets::CreateQueryProfileParam(
      _fbb);
}

inline QueryProfileResultT *QueryProfileResult::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<QueryProfileResultT>(new QueryProfileResultT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void QueryProfileResult::UnPackTo(QueryProfileResultT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = fps(); _o->fps = _e; }
}

inline flatbuffers::Offset<QueryProfileResult> QueryProfileResult::Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileResultT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateQueryProfileResult(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<QueryProfileResult> CreateQueryProfileResult(flatbuffers::FlatBufferBuilder &_fbb, const QueryProfileResultT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const QueryProfileResultT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _fps = _o->fps;
  return Gamium::Protocol::Packets::CreateQueryProfileResult(
      _fbb,
      _fps);
}

inline const flatbuffers::TypeTable *QueryProfileParamTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *QueryProfileResultTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

}  // namespace Packets
}  // namespace Protocol
}  // namespace Gamium

#endif  // FLATBUFFERS_GENERATED_PROFILEPACKET_GAMIUM_PROTOCOL_PACKETS_H_
