// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActionParamSingle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static ActionParamSingle GetRootAsActionParamSingle(ByteBuffer _bb) { return GetRootAsActionParamSingle(_bb, new ActionParamSingle()); }
  public static ActionParamSingle GetRootAsActionParamSingle(ByteBuffer _bb, ActionParamSingle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActionParamSingle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Gamium.Protocol.Packets.ActionParam ActionType { get { int o = __p.__offset(4); return o != 0 ? (Gamium.Protocol.Packets.ActionParam)__p.bb.Get(o + __p.bb_pos) : Gamium.Protocol.Packets.ActionParam.NONE; } }
  public TTable? Action<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public Gamium.Protocol.Packets.Actions.SleepParam ActionAsActions_SleepParam() { return Action<Gamium.Protocol.Packets.Actions.SleepParam>().Value; }
  public Gamium.Protocol.Packets.Actions.InputKeyParam ActionAsActions_InputKeyParam() { return Action<Gamium.Protocol.Packets.Actions.InputKeyParam>().Value; }
  public Gamium.Protocol.Packets.Actions.InputMouseParam ActionAsActions_InputMouseParam() { return Action<Gamium.Protocol.Packets.Actions.InputMouseParam>().Value; }
  public Gamium.Protocol.Packets.Actions.InputSetTextParam ActionAsActions_InputSetTextParam() { return Action<Gamium.Protocol.Packets.Actions.InputSetTextParam>().Value; }
  public Gamium.Protocol.Packets.Actions.MovePlayerParam ActionAsActions_MovePlayerParam() { return Action<Gamium.Protocol.Packets.Actions.MovePlayerParam>().Value; }
  public Gamium.Protocol.Packets.Actions.AppQuitParam ActionAsActions_AppQuitParam() { return Action<Gamium.Protocol.Packets.Actions.AppQuitParam>().Value; }

  public static Offset<Gamium.Protocol.Packets.ActionParamSingle> CreateActionParamSingle(FlatBufferBuilder builder,
      Gamium.Protocol.Packets.ActionParam action_type = Gamium.Protocol.Packets.ActionParam.NONE,
      int actionOffset = 0) {
    builder.StartTable(2);
    ActionParamSingle.AddAction(builder, actionOffset);
    ActionParamSingle.AddActionType(builder, action_type);
    return ActionParamSingle.EndActionParamSingle(builder);
  }

  public static void StartActionParamSingle(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddActionType(FlatBufferBuilder builder, Gamium.Protocol.Packets.ActionParam actionType) { builder.AddByte(0, (byte)actionType, 0); }
  public static void AddAction(FlatBufferBuilder builder, int actionOffset) { builder.AddOffset(1, actionOffset, 0); }
  public static Offset<Gamium.Protocol.Packets.ActionParamSingle> EndActionParamSingle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.ActionParamSingle>(o);
  }
  public ActionParamSingleT UnPack() {
    var _o = new ActionParamSingleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ActionParamSingleT _o) {
    _o.Action = new Gamium.Protocol.Packets.ActionParamUnion();
    _o.Action.Type = this.ActionType;
    switch (this.ActionType) {
      default: break;
      case Gamium.Protocol.Packets.ActionParam.Actions_SleepParam:
        _o.Action.Value = this.Action<Gamium.Protocol.Packets.Actions.SleepParam>().HasValue ? this.Action<Gamium.Protocol.Packets.Actions.SleepParam>().Value.UnPack() : null;
        break;
      case Gamium.Protocol.Packets.ActionParam.Actions_InputKeyParam:
        _o.Action.Value = this.Action<Gamium.Protocol.Packets.Actions.InputKeyParam>().HasValue ? this.Action<Gamium.Protocol.Packets.Actions.InputKeyParam>().Value.UnPack() : null;
        break;
      case Gamium.Protocol.Packets.ActionParam.Actions_InputMouseParam:
        _o.Action.Value = this.Action<Gamium.Protocol.Packets.Actions.InputMouseParam>().HasValue ? this.Action<Gamium.Protocol.Packets.Actions.InputMouseParam>().Value.UnPack() : null;
        break;
      case Gamium.Protocol.Packets.ActionParam.Actions_InputSetTextParam:
        _o.Action.Value = this.Action<Gamium.Protocol.Packets.Actions.InputSetTextParam>().HasValue ? this.Action<Gamium.Protocol.Packets.Actions.InputSetTextParam>().Value.UnPack() : null;
        break;
      case Gamium.Protocol.Packets.ActionParam.Actions_MovePlayerParam:
        _o.Action.Value = this.Action<Gamium.Protocol.Packets.Actions.MovePlayerParam>().HasValue ? this.Action<Gamium.Protocol.Packets.Actions.MovePlayerParam>().Value.UnPack() : null;
        break;
      case Gamium.Protocol.Packets.ActionParam.Actions_AppQuitParam:
        _o.Action.Value = this.Action<Gamium.Protocol.Packets.Actions.AppQuitParam>().HasValue ? this.Action<Gamium.Protocol.Packets.Actions.AppQuitParam>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<Gamium.Protocol.Packets.ActionParamSingle> Pack(FlatBufferBuilder builder, ActionParamSingleT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.ActionParamSingle>);
    var _action_type = _o.Action == null ? Gamium.Protocol.Packets.ActionParam.NONE : _o.Action.Type;
    var _action = _o.Action == null ? 0 : Gamium.Protocol.Packets.ActionParamUnion.Pack(builder, _o.Action);
    return CreateActionParamSingle(
      builder,
      _action_type,
      _action);
  }
}

public class ActionParamSingleT
{
  public Gamium.Protocol.Packets.ActionParamUnion Action { get; set; }

  public ActionParamSingleT() {
    this.Action = null;
  }
}


}
