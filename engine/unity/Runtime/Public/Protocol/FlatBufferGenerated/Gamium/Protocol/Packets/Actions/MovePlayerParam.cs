// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets.Actions
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MovePlayerParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static MovePlayerParam GetRootAsMovePlayerParam(ByteBuffer _bb) { return GetRootAsMovePlayerParam(_bb, new MovePlayerParam()); }
  public static MovePlayerParam GetRootAsMovePlayerParam(ByteBuffer _bb, MovePlayerParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MovePlayerParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerObjectId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerObjectIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerObjectIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerObjectIdArray() { return __p.__vector_as_array<byte>(4); }
  public string CameraObjectId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameraObjectIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCameraObjectIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCameraObjectIdArray() { return __p.__vector_as_array<byte>(6); }
  public Gamium.Protocol.Types.Vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (Gamium.Protocol.Types.Vector3?)(new Gamium.Protocol.Types.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Gamium.Protocol.Packets.Actions.MovePlayerBy By { get { int o = __p.__offset(10); return o != 0 ? (Gamium.Protocol.Packets.Actions.MovePlayerBy)__p.bb.GetShort(o + __p.bb_pos) : Gamium.Protocol.Packets.Actions.MovePlayerBy.KeyPress; } }
  public float Epsilon { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool CheckHeight { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Gamium.Protocol.Packets.Actions.MovePlayerParam> CreateMovePlayerParam(FlatBufferBuilder builder,
      StringOffset player_object_idOffset = default(StringOffset),
      StringOffset camera_object_idOffset = default(StringOffset),
      Gamium.Protocol.Types.Vector3T position = null,
      Gamium.Protocol.Packets.Actions.MovePlayerBy by = Gamium.Protocol.Packets.Actions.MovePlayerBy.KeyPress,
      float epsilon = 0.0f,
      bool check_height = false) {
    builder.StartTable(6);
    MovePlayerParam.AddEpsilon(builder, epsilon);
    MovePlayerParam.AddPosition(builder, Gamium.Protocol.Types.Vector3.Pack(builder, position));
    MovePlayerParam.AddCameraObjectId(builder, camera_object_idOffset);
    MovePlayerParam.AddPlayerObjectId(builder, player_object_idOffset);
    MovePlayerParam.AddBy(builder, by);
    MovePlayerParam.AddCheckHeight(builder, check_height);
    return MovePlayerParam.EndMovePlayerParam(builder);
  }

  public static void StartMovePlayerParam(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPlayerObjectId(FlatBufferBuilder builder, StringOffset playerObjectIdOffset) { builder.AddOffset(0, playerObjectIdOffset.Value, 0); }
  public static void AddCameraObjectId(FlatBufferBuilder builder, StringOffset cameraObjectIdOffset) { builder.AddOffset(1, cameraObjectIdOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.Vector3> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static void AddBy(FlatBufferBuilder builder, Gamium.Protocol.Packets.Actions.MovePlayerBy by) { builder.AddShort(3, (short)by, 0); }
  public static void AddEpsilon(FlatBufferBuilder builder, float epsilon) { builder.AddFloat(4, epsilon, 0.0f); }
  public static void AddCheckHeight(FlatBufferBuilder builder, bool checkHeight) { builder.AddBool(5, checkHeight, false); }
  public static Offset<Gamium.Protocol.Packets.Actions.MovePlayerParam> EndMovePlayerParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.Actions.MovePlayerParam>(o);
  }
  public MovePlayerParamT UnPack() {
    var _o = new MovePlayerParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MovePlayerParamT _o) {
    _o.PlayerObjectId = this.PlayerObjectId;
    _o.CameraObjectId = this.CameraObjectId;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.By = this.By;
    _o.Epsilon = this.Epsilon;
    _o.CheckHeight = this.CheckHeight;
  }
  public static Offset<Gamium.Protocol.Packets.Actions.MovePlayerParam> Pack(FlatBufferBuilder builder, MovePlayerParamT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.Actions.MovePlayerParam>);
    var _player_object_id = _o.PlayerObjectId == null ? default(StringOffset) : builder.CreateString(_o.PlayerObjectId);
    var _camera_object_id = _o.CameraObjectId == null ? default(StringOffset) : builder.CreateString(_o.CameraObjectId);
    return CreateMovePlayerParam(
      builder,
      _player_object_id,
      _camera_object_id,
      _o.Position,
      _o.By,
      _o.Epsilon,
      _o.CheckHeight);
  }
}

public class MovePlayerParamT
{
  public string PlayerObjectId { get; set; }
  public string CameraObjectId { get; set; }
  public Gamium.Protocol.Types.Vector3T Position { get; set; }
  public Gamium.Protocol.Packets.Actions.MovePlayerBy By { get; set; }
  public float Epsilon { get; set; }
  public bool CheckHeight { get; set; }

  public MovePlayerParamT() {
    this.PlayerObjectId = null;
    this.CameraObjectId = null;
    this.Position = new Gamium.Protocol.Types.Vector3T();
    this.By = Gamium.Protocol.Packets.Actions.MovePlayerBy.KeyPress;
    this.Epsilon = 0.0f;
    this.CheckHeight = false;
  }
}


}
