// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSE_GAMIUM_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_RESPONSE_GAMIUM_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "action_packet_generated.h"
#include "config_packet_generated.h"
#include "execute_packet_generated.h"
#include "health_packet_generated.h"
#include "inspector_packet_generated.h"
#include "object_packet_generated.h"
#include "profile_packet_generated.h"
#include "screen_packet_generated.h"
#include "errors_generated.h"

namespace Gamium {
namespace Protocol {

struct Response;
struct ResponseBuilder;
struct ResponseT;

inline const flatbuffers::TypeTable *ResponseTypeTable();

enum class Result : uint8_t {
  NONE = 0,
  Packets_HelloResult = 1,
  Packets_QueryScreenResult = 2,
  Packets_FindObjectsResult = 3,
  Packets_QueryObjectInteractableResult = 4,
  Packets_ActionsResult = 5,
  Packets_ExecuteRpcResult = 6,
  Packets_InspectObjectOnScreenResult = 7,
  Packets_InspectObjectWithIdResult = 8,
  Packets_DumpObjectsHierarchyResult = 9,
  Packets_ChangeConfigurationResult = 10,
  Packets_QueryProfileResult = 11,
  MIN = NONE,
  MAX = Packets_QueryProfileResult
};

inline const Result (&EnumValuesResult())[12] {
  static const Result values[] = {
    Result::NONE,
    Result::Packets_HelloResult,
    Result::Packets_QueryScreenResult,
    Result::Packets_FindObjectsResult,
    Result::Packets_QueryObjectInteractableResult,
    Result::Packets_ActionsResult,
    Result::Packets_ExecuteRpcResult,
    Result::Packets_InspectObjectOnScreenResult,
    Result::Packets_InspectObjectWithIdResult,
    Result::Packets_DumpObjectsHierarchyResult,
    Result::Packets_ChangeConfigurationResult,
    Result::Packets_QueryProfileResult
  };
  return values;
}

inline const char * const *EnumNamesResult() {
  static const char * const names[13] = {
    "NONE",
    "Packets_HelloResult",
    "Packets_QueryScreenResult",
    "Packets_FindObjectsResult",
    "Packets_QueryObjectInteractableResult",
    "Packets_ActionsResult",
    "Packets_ExecuteRpcResult",
    "Packets_InspectObjectOnScreenResult",
    "Packets_InspectObjectWithIdResult",
    "Packets_DumpObjectsHierarchyResult",
    "Packets_ChangeConfigurationResult",
    "Packets_QueryProfileResult",
    nullptr
  };
  return names;
}

inline const char *EnumNameResult(Result e) {
  if (flatbuffers::IsOutRange(e, Result::NONE, Result::Packets_QueryProfileResult)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResult()[index];
}

template<typename T> struct ResultTraits {
  static const Result enum_value = Result::NONE;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::HelloResult> {
  static const Result enum_value = Result::Packets_HelloResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::QueryScreenResult> {
  static const Result enum_value = Result::Packets_QueryScreenResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::FindObjectsResult> {
  static const Result enum_value = Result::Packets_FindObjectsResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::QueryObjectInteractableResult> {
  static const Result enum_value = Result::Packets_QueryObjectInteractableResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::ActionsResult> {
  static const Result enum_value = Result::Packets_ActionsResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::ExecuteRpcResult> {
  static const Result enum_value = Result::Packets_ExecuteRpcResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::InspectObjectOnScreenResult> {
  static const Result enum_value = Result::Packets_InspectObjectOnScreenResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::InspectObjectWithIdResult> {
  static const Result enum_value = Result::Packets_InspectObjectWithIdResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::DumpObjectsHierarchyResult> {
  static const Result enum_value = Result::Packets_DumpObjectsHierarchyResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::ChangeConfigurationResult> {
  static const Result enum_value = Result::Packets_ChangeConfigurationResult;
};

template<> struct ResultTraits<Gamium::Protocol::Packets::QueryProfileResult> {
  static const Result enum_value = Result::Packets_QueryProfileResult;
};

template<typename T> struct ResultUnionTraits {
  static const Result enum_value = Result::NONE;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::HelloResultT> {
  static const Result enum_value = Result::Packets_HelloResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::QueryScreenResultT> {
  static const Result enum_value = Result::Packets_QueryScreenResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::FindObjectsResultT> {
  static const Result enum_value = Result::Packets_FindObjectsResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::QueryObjectInteractableResultT> {
  static const Result enum_value = Result::Packets_QueryObjectInteractableResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::ActionsResultT> {
  static const Result enum_value = Result::Packets_ActionsResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::ExecuteRpcResultT> {
  static const Result enum_value = Result::Packets_ExecuteRpcResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::InspectObjectOnScreenResultT> {
  static const Result enum_value = Result::Packets_InspectObjectOnScreenResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::InspectObjectWithIdResultT> {
  static const Result enum_value = Result::Packets_InspectObjectWithIdResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::DumpObjectsHierarchyResultT> {
  static const Result enum_value = Result::Packets_DumpObjectsHierarchyResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::ChangeConfigurationResultT> {
  static const Result enum_value = Result::Packets_ChangeConfigurationResult;
};

template<> struct ResultUnionTraits<Gamium::Protocol::Packets::QueryProfileResultT> {
  static const Result enum_value = Result::Packets_QueryProfileResult;
};

struct ResultUnion {
  Result type;
  void *value;

  ResultUnion() : type(Result::NONE), value(nullptr) {}
  ResultUnion(ResultUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(Result::NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  ResultUnion(const ResultUnion &);
  ResultUnion &operator=(const ResultUnion &u)
    { ResultUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  ResultUnion &operator=(ResultUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~ResultUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = ResultUnionTraits<RT>::enum_value;
    if (type != Result::NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, Result type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  Gamium::Protocol::Packets::HelloResultT *AsPackets_HelloResult() {
    return type == Result::Packets_HelloResult ?
      reinterpret_cast<Gamium::Protocol::Packets::HelloResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::HelloResultT *AsPackets_HelloResult() const {
    return type == Result::Packets_HelloResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::HelloResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::QueryScreenResultT *AsPackets_QueryScreenResult() {
    return type == Result::Packets_QueryScreenResult ?
      reinterpret_cast<Gamium::Protocol::Packets::QueryScreenResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::QueryScreenResultT *AsPackets_QueryScreenResult() const {
    return type == Result::Packets_QueryScreenResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::QueryScreenResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::FindObjectsResultT *AsPackets_FindObjectsResult() {
    return type == Result::Packets_FindObjectsResult ?
      reinterpret_cast<Gamium::Protocol::Packets::FindObjectsResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::FindObjectsResultT *AsPackets_FindObjectsResult() const {
    return type == Result::Packets_FindObjectsResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::FindObjectsResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::QueryObjectInteractableResultT *AsPackets_QueryObjectInteractableResult() {
    return type == Result::Packets_QueryObjectInteractableResult ?
      reinterpret_cast<Gamium::Protocol::Packets::QueryObjectInteractableResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::QueryObjectInteractableResultT *AsPackets_QueryObjectInteractableResult() const {
    return type == Result::Packets_QueryObjectInteractableResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::QueryObjectInteractableResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::ActionsResultT *AsPackets_ActionsResult() {
    return type == Result::Packets_ActionsResult ?
      reinterpret_cast<Gamium::Protocol::Packets::ActionsResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::ActionsResultT *AsPackets_ActionsResult() const {
    return type == Result::Packets_ActionsResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::ActionsResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::ExecuteRpcResultT *AsPackets_ExecuteRpcResult() {
    return type == Result::Packets_ExecuteRpcResult ?
      reinterpret_cast<Gamium::Protocol::Packets::ExecuteRpcResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::ExecuteRpcResultT *AsPackets_ExecuteRpcResult() const {
    return type == Result::Packets_ExecuteRpcResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::ExecuteRpcResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::InspectObjectOnScreenResultT *AsPackets_InspectObjectOnScreenResult() {
    return type == Result::Packets_InspectObjectOnScreenResult ?
      reinterpret_cast<Gamium::Protocol::Packets::InspectObjectOnScreenResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::InspectObjectOnScreenResultT *AsPackets_InspectObjectOnScreenResult() const {
    return type == Result::Packets_InspectObjectOnScreenResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectOnScreenResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::InspectObjectWithIdResultT *AsPackets_InspectObjectWithIdResult() {
    return type == Result::Packets_InspectObjectWithIdResult ?
      reinterpret_cast<Gamium::Protocol::Packets::InspectObjectWithIdResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::InspectObjectWithIdResultT *AsPackets_InspectObjectWithIdResult() const {
    return type == Result::Packets_InspectObjectWithIdResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectWithIdResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::DumpObjectsHierarchyResultT *AsPackets_DumpObjectsHierarchyResult() {
    return type == Result::Packets_DumpObjectsHierarchyResult ?
      reinterpret_cast<Gamium::Protocol::Packets::DumpObjectsHierarchyResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::DumpObjectsHierarchyResultT *AsPackets_DumpObjectsHierarchyResult() const {
    return type == Result::Packets_DumpObjectsHierarchyResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::DumpObjectsHierarchyResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::ChangeConfigurationResultT *AsPackets_ChangeConfigurationResult() {
    return type == Result::Packets_ChangeConfigurationResult ?
      reinterpret_cast<Gamium::Protocol::Packets::ChangeConfigurationResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::ChangeConfigurationResultT *AsPackets_ChangeConfigurationResult() const {
    return type == Result::Packets_ChangeConfigurationResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::ChangeConfigurationResultT *>(value) : nullptr;
  }
  Gamium::Protocol::Packets::QueryProfileResultT *AsPackets_QueryProfileResult() {
    return type == Result::Packets_QueryProfileResult ?
      reinterpret_cast<Gamium::Protocol::Packets::QueryProfileResultT *>(value) : nullptr;
  }
  const Gamium::Protocol::Packets::QueryProfileResultT *AsPackets_QueryProfileResult() const {
    return type == Result::Packets_QueryProfileResult ?
      reinterpret_cast<const Gamium::Protocol::Packets::QueryProfileResultT *>(value) : nullptr;
  }
};

bool VerifyResult(flatbuffers::Verifier &verifier, const void *obj, Result type);
bool VerifyResultVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<Result> *types);

struct ResponseT : public flatbuffers::NativeTable {
  typedef Response TableType;
  uint32_t seq = 0;
  std::unique_ptr<Gamium::Protocol::Types::ErrorResultT> error{};
  Gamium::Protocol::ResultUnion result{};
  ResponseT() = default;
  ResponseT(const ResponseT &o);
  ResponseT(ResponseT&&) FLATBUFFERS_NOEXCEPT = default;
  ResponseT &operator=(ResponseT o) FLATBUFFERS_NOEXCEPT;
};

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResponseT NativeTableType;
  typedef ResponseBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ResponseTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQ = 4,
    VT_ERROR = 6,
    VT_RESULT_TYPE = 8,
    VT_RESULT = 10
  };
  uint32_t seq() const {
    return GetField<uint32_t>(VT_SEQ, 0);
  }
  const Gamium::Protocol::Types::ErrorResult *error() const {
    return GetPointer<const Gamium::Protocol::Types::ErrorResult *>(VT_ERROR);
  }
  Gamium::Protocol::Result result_type() const {
    return static_cast<Gamium::Protocol::Result>(GetField<uint8_t>(VT_RESULT_TYPE, 0));
  }
  const void *result() const {
    return GetPointer<const void *>(VT_RESULT);
  }
  template<typename T> const T *result_as() const;
  const Gamium::Protocol::Packets::HelloResult *result_as_Packets_HelloResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_HelloResult ? static_cast<const Gamium::Protocol::Packets::HelloResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::QueryScreenResult *result_as_Packets_QueryScreenResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_QueryScreenResult ? static_cast<const Gamium::Protocol::Packets::QueryScreenResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::FindObjectsResult *result_as_Packets_FindObjectsResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_FindObjectsResult ? static_cast<const Gamium::Protocol::Packets::FindObjectsResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::QueryObjectInteractableResult *result_as_Packets_QueryObjectInteractableResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_QueryObjectInteractableResult ? static_cast<const Gamium::Protocol::Packets::QueryObjectInteractableResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::ActionsResult *result_as_Packets_ActionsResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_ActionsResult ? static_cast<const Gamium::Protocol::Packets::ActionsResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::ExecuteRpcResult *result_as_Packets_ExecuteRpcResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_ExecuteRpcResult ? static_cast<const Gamium::Protocol::Packets::ExecuteRpcResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::InspectObjectOnScreenResult *result_as_Packets_InspectObjectOnScreenResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_InspectObjectOnScreenResult ? static_cast<const Gamium::Protocol::Packets::InspectObjectOnScreenResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::InspectObjectWithIdResult *result_as_Packets_InspectObjectWithIdResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_InspectObjectWithIdResult ? static_cast<const Gamium::Protocol::Packets::InspectObjectWithIdResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::DumpObjectsHierarchyResult *result_as_Packets_DumpObjectsHierarchyResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_DumpObjectsHierarchyResult ? static_cast<const Gamium::Protocol::Packets::DumpObjectsHierarchyResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::ChangeConfigurationResult *result_as_Packets_ChangeConfigurationResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_ChangeConfigurationResult ? static_cast<const Gamium::Protocol::Packets::ChangeConfigurationResult *>(result()) : nullptr;
  }
  const Gamium::Protocol::Packets::QueryProfileResult *result_as_Packets_QueryProfileResult() const {
    return result_type() == Gamium::Protocol::Result::Packets_QueryProfileResult ? static_cast<const Gamium::Protocol::Packets::QueryProfileResult *>(result()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SEQ, 4) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           VerifyField<uint8_t>(verifier, VT_RESULT_TYPE, 1) &&
           VerifyOffset(verifier, VT_RESULT) &&
           VerifyResult(verifier, result(), result_type()) &&
           verifier.EndTable();
  }
  ResponseT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ResponseT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Response> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const Gamium::Protocol::Packets::HelloResult *Response::result_as<Gamium::Protocol::Packets::HelloResult>() const {
  return result_as_Packets_HelloResult();
}

template<> inline const Gamium::Protocol::Packets::QueryScreenResult *Response::result_as<Gamium::Protocol::Packets::QueryScreenResult>() const {
  return result_as_Packets_QueryScreenResult();
}

template<> inline const Gamium::Protocol::Packets::FindObjectsResult *Response::result_as<Gamium::Protocol::Packets::FindObjectsResult>() const {
  return result_as_Packets_FindObjectsResult();
}

template<> inline const Gamium::Protocol::Packets::QueryObjectInteractableResult *Response::result_as<Gamium::Protocol::Packets::QueryObjectInteractableResult>() const {
  return result_as_Packets_QueryObjectInteractableResult();
}

template<> inline const Gamium::Protocol::Packets::ActionsResult *Response::result_as<Gamium::Protocol::Packets::ActionsResult>() const {
  return result_as_Packets_ActionsResult();
}

template<> inline const Gamium::Protocol::Packets::ExecuteRpcResult *Response::result_as<Gamium::Protocol::Packets::ExecuteRpcResult>() const {
  return result_as_Packets_ExecuteRpcResult();
}

template<> inline const Gamium::Protocol::Packets::InspectObjectOnScreenResult *Response::result_as<Gamium::Protocol::Packets::InspectObjectOnScreenResult>() const {
  return result_as_Packets_InspectObjectOnScreenResult();
}

template<> inline const Gamium::Protocol::Packets::InspectObjectWithIdResult *Response::result_as<Gamium::Protocol::Packets::InspectObjectWithIdResult>() const {
  return result_as_Packets_InspectObjectWithIdResult();
}

template<> inline const Gamium::Protocol::Packets::DumpObjectsHierarchyResult *Response::result_as<Gamium::Protocol::Packets::DumpObjectsHierarchyResult>() const {
  return result_as_Packets_DumpObjectsHierarchyResult();
}

template<> inline const Gamium::Protocol::Packets::ChangeConfigurationResult *Response::result_as<Gamium::Protocol::Packets::ChangeConfigurationResult>() const {
  return result_as_Packets_ChangeConfigurationResult();
}

template<> inline const Gamium::Protocol::Packets::QueryProfileResult *Response::result_as<Gamium::Protocol::Packets::QueryProfileResult>() const {
  return result_as_Packets_QueryProfileResult();
}

struct ResponseBuilder {
  typedef Response Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seq(uint32_t seq) {
    fbb_.AddElement<uint32_t>(Response::VT_SEQ, seq, 0);
  }
  void add_error(flatbuffers::Offset<Gamium::Protocol::Types::ErrorResult> error) {
    fbb_.AddOffset(Response::VT_ERROR, error);
  }
  void add_result_type(Gamium::Protocol::Result result_type) {
    fbb_.AddElement<uint8_t>(Response::VT_RESULT_TYPE, static_cast<uint8_t>(result_type), 0);
  }
  void add_result(flatbuffers::Offset<void> result) {
    fbb_.AddOffset(Response::VT_RESULT, result);
  }
  explicit ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t seq = 0,
    flatbuffers::Offset<Gamium::Protocol::Types::ErrorResult> error = 0,
    Gamium::Protocol::Result result_type = Gamium::Protocol::Result::NONE,
    flatbuffers::Offset<void> result = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_result(result);
  builder_.add_error(error);
  builder_.add_seq(seq);
  builder_.add_result_type(result_type);
  return builder_.Finish();
}

flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ResponseT::ResponseT(const ResponseT &o)
      : seq(o.seq),
        error((o.error) ? new Gamium::Protocol::Types::ErrorResultT(*o.error) : nullptr),
        result(o.result) {
}

inline ResponseT &ResponseT::operator=(ResponseT o) FLATBUFFERS_NOEXCEPT {
  std::swap(seq, o.seq);
  std::swap(error, o.error);
  std::swap(result, o.result);
  return *this;
}

inline ResponseT *Response::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ResponseT>(new ResponseT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Response::UnPackTo(ResponseT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = seq(); _o->seq = _e; }
  { auto _e = error(); if (_e) { if(_o->error) { _e->UnPackTo(_o->error.get(), _resolver); } else { _o->error = std::unique_ptr<Gamium::Protocol::Types::ErrorResultT>(_e->UnPack(_resolver)); } } else if (_o->error) { _o->error.reset(); } }
  { auto _e = result_type(); _o->result.type = _e; }
  { auto _e = result(); if (_e) _o->result.value = Gamium::Protocol::ResultUnion::UnPack(_e, result_type(), _resolver); }
}

inline flatbuffers::Offset<Response> Response::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateResponse(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Response> CreateResponse(flatbuffers::FlatBufferBuilder &_fbb, const ResponseT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ResponseT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _seq = _o->seq;
  auto _error = _o->error ? CreateErrorResult(_fbb, _o->error.get(), _rehasher) : 0;
  auto _result_type = _o->result.type;
  auto _result = _o->result.Pack(_fbb);
  return Gamium::Protocol::CreateResponse(
      _fbb,
      _seq,
      _error,
      _result_type,
      _result);
}

inline bool VerifyResult(flatbuffers::Verifier &verifier, const void *obj, Result type) {
  switch (type) {
    case Result::NONE: {
      return true;
    }
    case Result::Packets_HelloResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::HelloResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_QueryScreenResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryScreenResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_FindObjectsResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::FindObjectsResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_QueryObjectInteractableResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryObjectInteractableResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_ActionsResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ActionsResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_ExecuteRpcResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ExecuteRpcResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_InspectObjectOnScreenResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectOnScreenResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_InspectObjectWithIdResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectWithIdResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_DumpObjectsHierarchyResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::DumpObjectsHierarchyResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_ChangeConfigurationResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ChangeConfigurationResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Result::Packets_QueryProfileResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryProfileResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyResultVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<Result> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResult(
        verifier,  values->Get(i), types->GetEnum<Result>(i))) {
      return false;
    }
  }
  return true;
}

inline void *ResultUnion::UnPack(const void *obj, Result type, const flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case Result::Packets_HelloResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::HelloResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_QueryScreenResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryScreenResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_FindObjectsResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::FindObjectsResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_QueryObjectInteractableResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryObjectInteractableResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_ActionsResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ActionsResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_ExecuteRpcResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ExecuteRpcResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_InspectObjectOnScreenResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectOnScreenResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_InspectObjectWithIdResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectWithIdResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_DumpObjectsHierarchyResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::DumpObjectsHierarchyResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_ChangeConfigurationResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ChangeConfigurationResult *>(obj);
      return ptr->UnPack(resolver);
    }
    case Result::Packets_QueryProfileResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryProfileResult *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> ResultUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case Result::Packets_HelloResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::HelloResultT *>(value);
      return CreateHelloResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_QueryScreenResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryScreenResultT *>(value);
      return CreateQueryScreenResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_FindObjectsResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::FindObjectsResultT *>(value);
      return CreateFindObjectsResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_QueryObjectInteractableResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryObjectInteractableResultT *>(value);
      return CreateQueryObjectInteractableResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_ActionsResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ActionsResultT *>(value);
      return CreateActionsResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_ExecuteRpcResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ExecuteRpcResultT *>(value);
      return CreateExecuteRpcResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_InspectObjectOnScreenResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectOnScreenResultT *>(value);
      return CreateInspectObjectOnScreenResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_InspectObjectWithIdResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::InspectObjectWithIdResultT *>(value);
      return CreateInspectObjectWithIdResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_DumpObjectsHierarchyResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::DumpObjectsHierarchyResultT *>(value);
      return CreateDumpObjectsHierarchyResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_ChangeConfigurationResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::ChangeConfigurationResultT *>(value);
      return CreateChangeConfigurationResult(_fbb, ptr, _rehasher).Union();
    }
    case Result::Packets_QueryProfileResult: {
      auto ptr = reinterpret_cast<const Gamium::Protocol::Packets::QueryProfileResultT *>(value);
      return CreateQueryProfileResult(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline ResultUnion::ResultUnion(const ResultUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case Result::Packets_HelloResult: {
      value = new Gamium::Protocol::Packets::HelloResultT(*reinterpret_cast<Gamium::Protocol::Packets::HelloResultT *>(u.value));
      break;
    }
    case Result::Packets_QueryScreenResult: {
      value = new Gamium::Protocol::Packets::QueryScreenResultT(*reinterpret_cast<Gamium::Protocol::Packets::QueryScreenResultT *>(u.value));
      break;
    }
    case Result::Packets_FindObjectsResult: {
      value = new Gamium::Protocol::Packets::FindObjectsResultT(*reinterpret_cast<Gamium::Protocol::Packets::FindObjectsResultT *>(u.value));
      break;
    }
    case Result::Packets_QueryObjectInteractableResult: {
      value = new Gamium::Protocol::Packets::QueryObjectInteractableResultT(*reinterpret_cast<Gamium::Protocol::Packets::QueryObjectInteractableResultT *>(u.value));
      break;
    }
    case Result::Packets_ActionsResult: {
      value = new Gamium::Protocol::Packets::ActionsResultT(*reinterpret_cast<Gamium::Protocol::Packets::ActionsResultT *>(u.value));
      break;
    }
    case Result::Packets_ExecuteRpcResult: {
      value = new Gamium::Protocol::Packets::ExecuteRpcResultT(*reinterpret_cast<Gamium::Protocol::Packets::ExecuteRpcResultT *>(u.value));
      break;
    }
    case Result::Packets_InspectObjectOnScreenResult: {
      value = new Gamium::Protocol::Packets::InspectObjectOnScreenResultT(*reinterpret_cast<Gamium::Protocol::Packets::InspectObjectOnScreenResultT *>(u.value));
      break;
    }
    case Result::Packets_InspectObjectWithIdResult: {
      value = new Gamium::Protocol::Packets::InspectObjectWithIdResultT(*reinterpret_cast<Gamium::Protocol::Packets::InspectObjectWithIdResultT *>(u.value));
      break;
    }
    case Result::Packets_DumpObjectsHierarchyResult: {
      value = new Gamium::Protocol::Packets::DumpObjectsHierarchyResultT(*reinterpret_cast<Gamium::Protocol::Packets::DumpObjectsHierarchyResultT *>(u.value));
      break;
    }
    case Result::Packets_ChangeConfigurationResult: {
      value = new Gamium::Protocol::Packets::ChangeConfigurationResultT(*reinterpret_cast<Gamium::Protocol::Packets::ChangeConfigurationResultT *>(u.value));
      break;
    }
    case Result::Packets_QueryProfileResult: {
      value = new Gamium::Protocol::Packets::QueryProfileResultT(*reinterpret_cast<Gamium::Protocol::Packets::QueryProfileResultT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void ResultUnion::Reset() {
  switch (type) {
    case Result::Packets_HelloResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::HelloResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_QueryScreenResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::QueryScreenResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_FindObjectsResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::FindObjectsResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_QueryObjectInteractableResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::QueryObjectInteractableResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_ActionsResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::ActionsResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_ExecuteRpcResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::ExecuteRpcResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_InspectObjectOnScreenResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::InspectObjectOnScreenResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_InspectObjectWithIdResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::InspectObjectWithIdResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_DumpObjectsHierarchyResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::DumpObjectsHierarchyResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_ChangeConfigurationResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::ChangeConfigurationResultT *>(value);
      delete ptr;
      break;
    }
    case Result::Packets_QueryProfileResult: {
      auto ptr = reinterpret_cast<Gamium::Protocol::Packets::QueryProfileResultT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = Result::NONE;
}

inline const flatbuffers::TypeTable *ResultTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 3 },
    { flatbuffers::ET_SEQUENCE, 0, 4 },
    { flatbuffers::ET_SEQUENCE, 0, 5 },
    { flatbuffers::ET_SEQUENCE, 0, 6 },
    { flatbuffers::ET_SEQUENCE, 0, 7 },
    { flatbuffers::ET_SEQUENCE, 0, 8 },
    { flatbuffers::ET_SEQUENCE, 0, 9 },
    { flatbuffers::ET_SEQUENCE, 0, 10 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Gamium::Protocol::Packets::HelloResultTypeTable,
    Gamium::Protocol::Packets::QueryScreenResultTypeTable,
    Gamium::Protocol::Packets::FindObjectsResultTypeTable,
    Gamium::Protocol::Packets::QueryObjectInteractableResultTypeTable,
    Gamium::Protocol::Packets::ActionsResultTypeTable,
    Gamium::Protocol::Packets::ExecuteRpcResultTypeTable,
    Gamium::Protocol::Packets::InspectObjectOnScreenResultTypeTable,
    Gamium::Protocol::Packets::InspectObjectWithIdResultTypeTable,
    Gamium::Protocol::Packets::DumpObjectsHierarchyResultTypeTable,
    Gamium::Protocol::Packets::ChangeConfigurationResultTypeTable,
    Gamium::Protocol::Packets::QueryProfileResultTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 12, type_codes, type_refs, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *ResponseTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_UTYPE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Gamium::Protocol::Types::ErrorResultTypeTable,
    Gamium::Protocol::ResultTypeTable
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const Gamium::Protocol::Response *GetResponse(const void *buf) {
  return flatbuffers::GetRoot<Gamium::Protocol::Response>(buf);
}

inline const Gamium::Protocol::Response *GetSizePrefixedResponse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Gamium::Protocol::Response>(buf);
}

inline bool VerifyResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Gamium::Protocol::Response>(nullptr);
}

inline bool VerifySizePrefixedResponseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Gamium::Protocol::Response>(nullptr);
}

inline void FinishResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Gamium::Protocol::Response> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResponseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Gamium::Protocol::Response> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<Gamium::Protocol::ResponseT> UnPackResponse(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Gamium::Protocol::ResponseT>(GetResponse(buf)->UnPack(res));
}

inline std::unique_ptr<Gamium::Protocol::ResponseT> UnPackSizePrefixedResponse(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Gamium::Protocol::ResponseT>(GetSizePrefixedResponse(buf)->UnPack(res));
}

}  // namespace Protocol
}  // namespace Gamium

#endif  // FLATBUFFERS_GENERATED_RESPONSE_GAMIUM_PROTOCOL_H_
