// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class HelloParam implements flatbuffers.IUnpackableObject<HelloParamT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): HelloParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsHelloParam(bb: flatbuffers.ByteBuffer, obj?: HelloParam): HelloParam {
    return (obj || new HelloParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsHelloParam(bb: flatbuffers.ByteBuffer, obj?: HelloParam): HelloParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new HelloParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  version(): string | null;
  version(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  version(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startHelloParam(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addVersion(builder: flatbuffers.Builder, versionOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, versionOffset, 0);
  }

  static endHelloParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createHelloParam(builder: flatbuffers.Builder, versionOffset: flatbuffers.Offset): flatbuffers.Offset {
    HelloParam.startHelloParam(builder);
    HelloParam.addVersion(builder, versionOffset);
    return HelloParam.endHelloParam(builder);
  }

  unpack(): HelloParamT {
    return new HelloParamT(this.version());
  }

  unpackTo(_o: HelloParamT): void {
    _o.version = this.version();
  }
}

export class HelloParamT implements flatbuffers.IGeneratedObject {
  constructor(public version: string | Uint8Array | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const version = this.version !== null ? builder.createString(this.version!) : 0;

    return HelloParam.createHelloParam(builder, version);
  }
}
