// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ObjectInfo, ObjectInfoT } from '../../../gamium/protocol/types/object-info.js';

export class InspectObjectWithIdResult implements flatbuffers.IUnpackableObject<InspectObjectWithIdResultT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): InspectObjectWithIdResult {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsInspectObjectWithIdResult(bb: flatbuffers.ByteBuffer, obj?: InspectObjectWithIdResult): InspectObjectWithIdResult {
    return (obj || new InspectObjectWithIdResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsInspectObjectWithIdResult(bb: flatbuffers.ByteBuffer, obj?: InspectObjectWithIdResult): InspectObjectWithIdResult {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new InspectObjectWithIdResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  info(obj?: ObjectInfo): ObjectInfo | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? (obj || new ObjectInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
  }

  static startInspectObjectWithIdResult(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addInfo(builder: flatbuffers.Builder, infoOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, infoOffset, 0);
  }

  static endInspectObjectWithIdResult(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createInspectObjectWithIdResult(builder: flatbuffers.Builder, infoOffset: flatbuffers.Offset): flatbuffers.Offset {
    InspectObjectWithIdResult.startInspectObjectWithIdResult(builder);
    InspectObjectWithIdResult.addInfo(builder, infoOffset);
    return InspectObjectWithIdResult.endInspectObjectWithIdResult(builder);
  }

  unpack(): InspectObjectWithIdResultT {
    return new InspectObjectWithIdResultT(this.info() !== null ? this.info()!.unpack() : null);
  }

  unpackTo(_o: InspectObjectWithIdResultT): void {
    _o.info = this.info() !== null ? this.info()!.unpack() : null;
  }
}

export class InspectObjectWithIdResultT implements flatbuffers.IGeneratedObject {
  constructor(public info: ObjectInfoT | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const info = this.info !== null ? this.info!.pack(builder) : 0;

    return InspectObjectWithIdResult.createInspectObjectWithIdResult(builder, info);
  }
}
