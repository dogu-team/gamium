// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCREENPACKET_GAMIUM_PROTOCOL_PACKETS_H_
#define FLATBUFFERS_GENERATED_SCREENPACKET_GAMIUM_PROTOCOL_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Gamium {
namespace Protocol {
namespace Packets {

struct QueryScreenParam;
struct QueryScreenParamBuilder;
struct QueryScreenParamT;

struct QueryScreenResult;
struct QueryScreenResultBuilder;
struct QueryScreenResultT;

inline const flatbuffers::TypeTable *QueryScreenParamTypeTable();

inline const flatbuffers::TypeTable *QueryScreenResultTypeTable();

struct QueryScreenParamT : public flatbuffers::NativeTable {
  typedef QueryScreenParam TableType;
};

struct QueryScreenParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QueryScreenParamT NativeTableType;
  typedef QueryScreenParamBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return QueryScreenParamTypeTable();
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  QueryScreenParamT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(QueryScreenParamT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<QueryScreenParam> Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenParamT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct QueryScreenParamBuilder {
  typedef QueryScreenParam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit QueryScreenParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<QueryScreenParam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QueryScreenParam>(end);
    return o;
  }
};

inline flatbuffers::Offset<QueryScreenParam> CreateQueryScreenParam(
    flatbuffers::FlatBufferBuilder &_fbb) {
  QueryScreenParamBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<QueryScreenParam> CreateQueryScreenParam(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenParamT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct QueryScreenResultT : public flatbuffers::NativeTable {
  typedef QueryScreenResult TableType;
  int32_t width = 0;
  int32_t height = 0;
};

struct QueryScreenResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QueryScreenResultT NativeTableType;
  typedef QueryScreenResultBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return QueryScreenResultTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           verifier.EndTable();
  }
  QueryScreenResultT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(QueryScreenResultT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<QueryScreenResult> Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenResultT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct QueryScreenResultBuilder {
  typedef QueryScreenResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(QueryScreenResult::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(QueryScreenResult::VT_HEIGHT, height, 0);
  }
  explicit QueryScreenResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<QueryScreenResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QueryScreenResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<QueryScreenResult> CreateQueryScreenResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0) {
  QueryScreenResultBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

flatbuffers::Offset<QueryScreenResult> CreateQueryScreenResult(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenResultT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline QueryScreenParamT *QueryScreenParam::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<QueryScreenParamT>(new QueryScreenParamT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void QueryScreenParam::UnPackTo(QueryScreenParamT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<QueryScreenParam> QueryScreenParam::Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenParamT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateQueryScreenParam(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<QueryScreenParam> CreateQueryScreenParam(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenParamT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const QueryScreenParamT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return Gamium::Protocol::Packets::CreateQueryScreenParam(
      _fbb);
}

inline QueryScreenResultT *QueryScreenResult::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<QueryScreenResultT>(new QueryScreenResultT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void QueryScreenResult::UnPackTo(QueryScreenResultT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
}

inline flatbuffers::Offset<QueryScreenResult> QueryScreenResult::Pack(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenResultT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateQueryScreenResult(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<QueryScreenResult> CreateQueryScreenResult(flatbuffers::FlatBufferBuilder &_fbb, const QueryScreenResultT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const QueryScreenResultT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _width = _o->width;
  auto _height = _o->height;
  return Gamium::Protocol::Packets::CreateQueryScreenResult(
      _fbb,
      _width,
      _height);
}

inline const flatbuffers::TypeTable *QueryScreenParamTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *QueryScreenResultTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

}  // namespace Packets
}  // namespace Protocol
}  // namespace Gamium

#endif  // FLATBUFFERS_GENERATED_SCREENPACKET_GAMIUM_PROTOCOL_PACKETS_H_
