// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct InspectObjectWithIdResult : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static InspectObjectWithIdResult GetRootAsInspectObjectWithIdResult(ByteBuffer _bb) { return GetRootAsInspectObjectWithIdResult(_bb, new InspectObjectWithIdResult()); }
  public static InspectObjectWithIdResult GetRootAsInspectObjectWithIdResult(ByteBuffer _bb, InspectObjectWithIdResult obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InspectObjectWithIdResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Gamium.Protocol.Types.ObjectInfo? Info { get { int o = __p.__offset(4); return o != 0 ? (Gamium.Protocol.Types.ObjectInfo?)(new Gamium.Protocol.Types.ObjectInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Gamium.Protocol.Packets.InspectObjectWithIdResult> CreateInspectObjectWithIdResult(FlatBufferBuilder builder,
      Offset<Gamium.Protocol.Types.ObjectInfo> infoOffset = default(Offset<Gamium.Protocol.Types.ObjectInfo>)) {
    builder.StartTable(1);
    InspectObjectWithIdResult.AddInfo(builder, infoOffset);
    return InspectObjectWithIdResult.EndInspectObjectWithIdResult(builder);
  }

  public static void StartInspectObjectWithIdResult(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddInfo(FlatBufferBuilder builder, Offset<Gamium.Protocol.Types.ObjectInfo> infoOffset) { builder.AddOffset(0, infoOffset.Value, 0); }
  public static Offset<Gamium.Protocol.Packets.InspectObjectWithIdResult> EndInspectObjectWithIdResult(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.InspectObjectWithIdResult>(o);
  }
  public InspectObjectWithIdResultT UnPack() {
    var _o = new InspectObjectWithIdResultT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InspectObjectWithIdResultT _o) {
    _o.Info = this.Info.HasValue ? this.Info.Value.UnPack() : null;
  }
  public static Offset<Gamium.Protocol.Packets.InspectObjectWithIdResult> Pack(FlatBufferBuilder builder, InspectObjectWithIdResultT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.InspectObjectWithIdResult>);
    var _info = _o.Info == null ? default(Offset<Gamium.Protocol.Types.ObjectInfo>) : Gamium.Protocol.Types.ObjectInfo.Pack(builder, _o.Info);
    return CreateInspectObjectWithIdResult(
      builder,
      _info);
  }
}

public class InspectObjectWithIdResultT
{
  public Gamium.Protocol.Types.ObjectInfoT Info { get; set; }

  public InspectObjectWithIdResultT() {
    this.Info = null;
  }
}


}
