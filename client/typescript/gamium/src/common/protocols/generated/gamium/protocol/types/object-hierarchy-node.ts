// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ObjectHierarchyNode implements flatbuffers.IUnpackableObject<ObjectHierarchyNodeT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ObjectHierarchyNode {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsObjectHierarchyNode(bb: flatbuffers.ByteBuffer, obj?: ObjectHierarchyNode): ObjectHierarchyNode {
    return (obj || new ObjectHierarchyNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsObjectHierarchyNode(bb: flatbuffers.ByteBuffer, obj?: ObjectHierarchyNode): ObjectHierarchyNode {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ObjectHierarchyNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  name(): string | null;
  name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  name(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  path(): string | null;
  path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  path(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  children(index: number, obj?: ObjectHierarchyNode): ObjectHierarchyNode | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? (obj || new ObjectHierarchyNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
  }

  childrenLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startObjectHierarchyNode(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, nameOffset, 0);
  }

  static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, pathOffset, 0);
  }

  static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, childrenOffset, 0);
  }

  static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endObjectHierarchyNode(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // name
    builder.requiredField(offset, 6); // path
    return offset;
  }

  static createObjectHierarchyNode(
    builder: flatbuffers.Builder,
    nameOffset: flatbuffers.Offset,
    pathOffset: flatbuffers.Offset,
    childrenOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    ObjectHierarchyNode.startObjectHierarchyNode(builder);
    ObjectHierarchyNode.addName(builder, nameOffset);
    ObjectHierarchyNode.addPath(builder, pathOffset);
    ObjectHierarchyNode.addChildren(builder, childrenOffset);
    return ObjectHierarchyNode.endObjectHierarchyNode(builder);
  }

  unpack(): ObjectHierarchyNodeT {
    return new ObjectHierarchyNodeT(
      this.name(),
      this.path(),
      this.bb!.createObjList<ObjectHierarchyNode, ObjectHierarchyNodeT>(this.children.bind(this), this.childrenLength()),
    );
  }

  unpackTo(_o: ObjectHierarchyNodeT): void {
    _o.name = this.name();
    _o.path = this.path();
    _o.children = this.bb!.createObjList<ObjectHierarchyNode, ObjectHierarchyNodeT>(this.children.bind(this), this.childrenLength());
  }
}

export class ObjectHierarchyNodeT implements flatbuffers.IGeneratedObject {
  constructor(public name: string | Uint8Array | null = null, public path: string | Uint8Array | null = null, public children: ObjectHierarchyNodeT[] = []) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const name = this.name !== null ? builder.createString(this.name!) : 0;
    const path = this.path !== null ? builder.createString(this.path!) : 0;
    const children = ObjectHierarchyNode.createChildrenVector(builder, builder.createObjectOffsetList(this.children));

    return ObjectHierarchyNode.createObjectHierarchyNode(builder, name, path, children);
  }
}
