// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { ErrorCode } from "../../../gamium/protocol/types/error-code.js";

export class ErrorResult
  implements flatbuffers.IUnpackableObject<ErrorResultT>
{
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ErrorResult {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsErrorResult(
    bb: flatbuffers.ByteBuffer,
    obj?: ErrorResult
  ): ErrorResult {
    return (obj || new ErrorResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsErrorResult(
    bb: flatbuffers.ByteBuffer,
    obj?: ErrorResult
  ): ErrorResult {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ErrorResult()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  code(): ErrorCode {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : ErrorCode.None;
  }

  reason(): string | null;
  reason(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  reason(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startErrorResult(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addCode(builder: flatbuffers.Builder, code: ErrorCode) {
    builder.addFieldInt32(0, code, ErrorCode.None);
  }

  static addReason(
    builder: flatbuffers.Builder,
    reasonOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(1, reasonOffset, 0);
  }

  static endErrorResult(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createErrorResult(
    builder: flatbuffers.Builder,
    code: ErrorCode,
    reasonOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    ErrorResult.startErrorResult(builder);
    ErrorResult.addCode(builder, code);
    ErrorResult.addReason(builder, reasonOffset);
    return ErrorResult.endErrorResult(builder);
  }

  unpack(): ErrorResultT {
    return new ErrorResultT(this.code(), this.reason());
  }

  unpackTo(_o: ErrorResultT): void {
    _o.code = this.code();
    _o.reason = this.reason();
  }
}

export class ErrorResultT implements flatbuffers.IGeneratedObject {
  constructor(
    public code: ErrorCode = ErrorCode.None,
    public reason: string | Uint8Array | null = null
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const reason =
      this.reason !== null ? builder.createString(this.reason!) : 0;

    return ErrorResult.createErrorResult(builder, this.code, reason);
  }
}
