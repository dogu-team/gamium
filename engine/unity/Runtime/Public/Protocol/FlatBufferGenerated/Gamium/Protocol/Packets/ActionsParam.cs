// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Gamium.Protocol.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActionsParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static ActionsParam GetRootAsActionsParam(ByteBuffer _bb) { return GetRootAsActionsParam(_bb, new ActionsParam()); }
  public static ActionsParam GetRootAsActionsParam(ByteBuffer _bb, ActionsParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActionsParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Actions(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ActionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Gamium.Protocol.Packets.ActionsParam> CreateActionsParam(FlatBufferBuilder builder,
      VectorOffset actionsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ActionsParam.AddActions(builder, actionsOffset);
    return ActionsParam.EndActionsParam(builder);
  }

  public static void StartActionsParam(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddActions(FlatBufferBuilder builder, VectorOffset actionsOffset) { builder.AddOffset(0, actionsOffset.Value, 0); }
  public static VectorOffset CreateActionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Gamium.Protocol.Packets.ActionsParam> EndActionsParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Gamium.Protocol.Packets.ActionsParam>(o);
  }
  public ActionsParamT UnPack() {
    var _o = new ActionsParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ActionsParamT _o) {
    _o.Actions = new List<string>();
    for (var _j = 0; _j < this.ActionsLength; ++_j) {_o.Actions.Add(this.Actions(_j));}
  }
  public static Offset<Gamium.Protocol.Packets.ActionsParam> Pack(FlatBufferBuilder builder, ActionsParamT _o) {
    if (_o == null) return default(Offset<Gamium.Protocol.Packets.ActionsParam>);
    var _actions = default(VectorOffset);
    if (_o.Actions != null) {
      var __actions = new StringOffset[_o.Actions.Count];
      for (var _j = 0; _j < __actions.Length; ++_j) { __actions[_j] = builder.CreateString(_o.Actions[_j]); }
      _actions = CreateActionsVector(builder, __actions);
    }
    return CreateActionsParam(
      builder,
      _actions);
  }
}

public class ActionsParamT
{
  public List<string> Actions { get; set; }

  public ActionsParamT() {
    this.Actions = null;
  }
}


}
