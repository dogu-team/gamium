// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MovePlayerBy } from '../../../../gamium/protocol/packets/actions/move-player-by.js';
import { Vector3, Vector3T } from '../../../../gamium/protocol/types/vector3.js';

export class MovePlayerParam implements flatbuffers.IUnpackableObject<MovePlayerParamT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): MovePlayerParam {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsMovePlayerParam(bb: flatbuffers.ByteBuffer, obj?: MovePlayerParam): MovePlayerParam {
    return (obj || new MovePlayerParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsMovePlayerParam(bb: flatbuffers.ByteBuffer, obj?: MovePlayerParam): MovePlayerParam {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new MovePlayerParam()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  playerObjectId(): string | null;
  playerObjectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  playerObjectId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  cameraObjectId(): string | null;
  cameraObjectId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  cameraObjectId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  position(obj?: Vector3): Vector3 | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? (obj || new Vector3()).__init(this.bb_pos + offset, this.bb!) : null;
  }

  by(): MovePlayerBy {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readInt16(this.bb_pos + offset) : MovePlayerBy.KeyPress;
  }

  epsilon(): number {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
  }

  checkHeight(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startMovePlayerParam(builder: flatbuffers.Builder) {
    builder.startObject(6);
  }

  static addPlayerObjectId(builder: flatbuffers.Builder, playerObjectIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, playerObjectIdOffset, 0);
  }

  static addCameraObjectId(builder: flatbuffers.Builder, cameraObjectIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, cameraObjectIdOffset, 0);
  }

  static addPosition(builder: flatbuffers.Builder, positionOffset: flatbuffers.Offset) {
    builder.addFieldStruct(2, positionOffset, 0);
  }

  static addBy(builder: flatbuffers.Builder, by: MovePlayerBy) {
    builder.addFieldInt16(3, by, MovePlayerBy.KeyPress);
  }

  static addEpsilon(builder: flatbuffers.Builder, epsilon: number) {
    builder.addFieldFloat32(4, epsilon, 0.0);
  }

  static addCheckHeight(builder: flatbuffers.Builder, checkHeight: boolean) {
    builder.addFieldInt8(5, +checkHeight, +false);
  }

  static endMovePlayerParam(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  unpack(): MovePlayerParamT {
    return new MovePlayerParamT(
      this.playerObjectId(),
      this.cameraObjectId(),
      this.position() !== null ? this.position()!.unpack() : null,
      this.by(),
      this.epsilon(),
      this.checkHeight(),
    );
  }

  unpackTo(_o: MovePlayerParamT): void {
    _o.playerObjectId = this.playerObjectId();
    _o.cameraObjectId = this.cameraObjectId();
    _o.position = this.position() !== null ? this.position()!.unpack() : null;
    _o.by = this.by();
    _o.epsilon = this.epsilon();
    _o.checkHeight = this.checkHeight();
  }
}

export class MovePlayerParamT implements flatbuffers.IGeneratedObject {
  constructor(
    public playerObjectId: string | Uint8Array | null = null,
    public cameraObjectId: string | Uint8Array | null = null,
    public position: Vector3T | null = null,
    public by: MovePlayerBy = MovePlayerBy.KeyPress,
    public epsilon: number = 0.0,
    public checkHeight: boolean = false,
  ) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const playerObjectId = this.playerObjectId !== null ? builder.createString(this.playerObjectId!) : 0;
    const cameraObjectId = this.cameraObjectId !== null ? builder.createString(this.cameraObjectId!) : 0;

    MovePlayerParam.startMovePlayerParam(builder);
    MovePlayerParam.addPlayerObjectId(builder, playerObjectId);
    MovePlayerParam.addCameraObjectId(builder, cameraObjectId);
    MovePlayerParam.addPosition(builder, this.position !== null ? this.position!.pack(builder) : 0);
    MovePlayerParam.addBy(builder, this.by);
    MovePlayerParam.addEpsilon(builder, this.epsilon);
    MovePlayerParam.addCheckHeight(builder, this.checkHeight);

    return MovePlayerParam.endMovePlayerParam(builder);
  }
}
